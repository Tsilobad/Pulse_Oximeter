
Pulse_Oximeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800461c  0800461c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004624  08004624  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800462c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08004694  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000280  08004694  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b016  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b39  00000000  00000000  0002b0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0002cc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d3  00000000  00000000  0002d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b38  00000000  00000000  0002de13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbc4  00000000  00000000  0004494b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000890f5  00000000  00000000  0005150f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003600  00000000  00000000  000da604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ddc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004348 	.word	0x08004348

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004348 	.word	0x08004348

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800059a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800059e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005a6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005aa:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005ae:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f80e 	bl	80005e2 <Lcd_init>

	return lcd;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	461d      	mov	r5, r3
 80005ca:	f107 0410 	add.w	r4, r7, #16
 80005ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005d6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005da:	68f8      	ldr	r0, [r7, #12]
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}

080005e2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7d9b      	ldrb	r3, [r3, #22]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10c      	bne.n	800060c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005f2:	2133      	movs	r1, #51	; 0x33
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f863 	bl	80006c0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005fa:	2132      	movs	r1, #50	; 0x32
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f85f 	bl	80006c0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000602:	2128      	movs	r1, #40	; 0x28
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f85b 	bl	80006c0 <lcd_write_command>
 800060a:	e003      	b.n	8000614 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800060c:	2138      	movs	r1, #56	; 0x38
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f856 	bl	80006c0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000614:	2101      	movs	r1, #1
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f852 	bl	80006c0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800061c:	210c      	movs	r1, #12
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f84e 	bl	80006c0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000624:	2106      	movs	r1, #6
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f84a 	bl	80006c0 <lcd_write_command>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e00a      	b.n	800065a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f864 	bl	800071c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	3301      	adds	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	7bfc      	ldrb	r4, [r7, #15]
 800065c:	6838      	ldr	r0, [r7, #0]
 800065e:	f7ff fdbf 	bl	80001e0 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	429c      	cmp	r4, r3
 8000666:	d3ed      	bcc.n	8000644 <Lcd_string+0x10>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bd90      	pop	{r4, r7, pc}
	...

08000674 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
 8000680:	4613      	mov	r3, r2
 8000682:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <Lcd_cursor+0x30>)
 8000688:	5cd2      	ldrb	r2, [r2, r3]
 800068a:	78bb      	ldrb	r3, [r7, #2]
 800068c:	4413      	add	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	3b80      	subs	r3, #128	; 0x80
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f812 	bl	80006c0 <lcd_write_command>
	#endif
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	0800441c 	.word	0x0800441c

080006a8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80006b0:	2101      	movs	r1, #1
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f804 	bl	80006c0 <lcd_write_command>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6898      	ldr	r0, [r3, #8]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	899b      	ldrh	r3, [r3, #12]
 80006d4:	2200      	movs	r2, #0
 80006d6:	4619      	mov	r1, r3
 80006d8:	f001 f854 	bl	8001784 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7d9b      	ldrb	r3, [r3, #22]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d111      	bne.n	8000708 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	091b      	lsrs	r3, r3, #4
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2204      	movs	r2, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f842 	bl	8000778 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2204      	movs	r2, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f839 	bl	8000778 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000706:	e005      	b.n	8000714 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2208      	movs	r2, #8
 800070c:	4619      	mov	r1, r3
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f832 	bl	8000778 <lcd_write>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6898      	ldr	r0, [r3, #8]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	f001 f826 	bl	8001784 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7d9b      	ldrb	r3, [r3, #22]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d111      	bne.n	8000764 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	091b      	lsrs	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2204      	movs	r2, #4
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f814 	bl	8000778 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2204      	movs	r2, #4
 800075a:	4619      	mov	r1, r3
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f80b 	bl	8000778 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000762:	e005      	b.n	8000770 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	2208      	movs	r2, #8
 8000768:	4619      	mov	r1, r3
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f804 	bl	8000778 <lcd_write>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
 8000784:	4613      	mov	r3, r2
 8000786:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
 800078c:	e019      	b.n	80007c2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	4413      	add	r3, r2
 80007a4:	8819      	ldrh	r1, [r3, #0]
 80007a6:	78fa      	ldrb	r2, [r7, #3]
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	fa42 f303 	asr.w	r3, r2, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	f000 ffe4 	bl	8001784 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	3301      	adds	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
 80007c2:	7bfa      	ldrb	r2, [r7, #15]
 80007c4:	78bb      	ldrb	r3, [r7, #2]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3e1      	bcc.n	800078e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6918      	ldr	r0, [r3, #16]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	8a9b      	ldrh	r3, [r3, #20]
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	f000 ffd5 	bl	8001784 <HAL_GPIO_WritePin>
	DELAY(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 fd18 	bl	8001210 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	8a9b      	ldrh	r3, [r3, #20]
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	f000 ffca 	bl	8001784 <HAL_GPIO_WritePin>
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000804:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d013      	beq.n	8000838 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000810:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000814:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000818:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00b      	beq.n	8000838 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000820:	e000      	b.n	8000824 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000822:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000824:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f9      	beq.n	8000822 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800082e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_write>:
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

  /* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	e009      	b.n	8000870 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffc7 	bl	80007f8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	dbf1      	blt.n	800085c <_write+0x16>
  return len;
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)				// this is the function that executes when EXT interrupt comes in
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	80fb      	strh	r3, [r7, #6]
	// ToDO: implement this to do what it is required to do

}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b0a6      	sub	sp, #152	; 0x98
 800089c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800089e:	f000 fc45 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f901 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 f9c1 	bl	8000c2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008aa:	f000 f995 	bl	8000bd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008ae:	f000 f965 	bl	8000b7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 80008b2:	4b6c      	ldr	r3, [pc, #432]	; (8000a64 <main+0x1cc>)
 80008b4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80008b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 80008be:	4a6a      	ldr	r2, [pc, #424]	; (8000a68 <main+0x1d0>)
 80008c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c8:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80008cc:	4638      	mov	r0, r7
 80008ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80008d2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80008d6:	2300      	movs	r3, #0
 80008d8:	9303      	str	r3, [sp, #12]
 80008da:	2310      	movs	r3, #16
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	4b63      	ldr	r3, [pc, #396]	; (8000a6c <main+0x1d4>)
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	2320      	movs	r3, #32
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	4b61      	ldr	r3, [pc, #388]	; (8000a6c <main+0x1d4>)
 80008e8:	f7ff fe50 	bl	800058c <Lcd_create>
 80008ec:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80008f0:	463d      	mov	r5, r7
 80008f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008fa:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd, 0,1);
 80008fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000902:	2201      	movs	r2, #1
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff feb4 	bl	8000674 <Lcd_cursor>
  Lcd_string(&lcd, "'LCD Test'");
 800090c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000910:	4957      	ldr	r1, [pc, #348]	; (8000a70 <main+0x1d8>)
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fe8e 	bl	8000634 <Lcd_string>
//	Lcd_cursor(&lcd, 1,7);
//	Lcd_int(&lcd, x);
//	HAL_Delay (100);
//  }

  printf("Hello World!\n");
 8000918:	4856      	ldr	r0, [pc, #344]	; (8000a74 <main+0x1dc>)
 800091a:	f002 fbff 	bl	800311c <puts>
//	  }



	  // STM32 is a slave, so it will wait for data from the master
	  printf("waiting for I2C\n");
 800091e:	4856      	ldr	r0, [pc, #344]	; (8000a78 <main+0x1e0>)
 8000920:	f002 fbfc 	bl	800311c <puts>
	  HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)dataBuffer, sizeof(dataBuffer), HAL_MAX_DELAY);
 8000924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000928:	2210      	movs	r2, #16
 800092a:	4954      	ldr	r1, [pc, #336]	; (8000a7c <main+0x1e4>)
 800092c:	4854      	ldr	r0, [pc, #336]	; (8000a80 <main+0x1e8>)
 800092e:	f001 f89f 	bl	8001a70 <HAL_I2C_Slave_Receive>

	  printf("received I2C\n");
 8000932:	4854      	ldr	r0, [pc, #336]	; (8000a84 <main+0x1ec>)
 8000934:	f002 fbf2 	bl	800311c <puts>
//	  Lcd_clear(&lcd);
//	  Lcd_cursor(&lcd, 0,0);
//	  Lcd_string(&lcd, stringBuffer);

	  // Process the received data as needed
	  strncpy(stringBuffer, (char*)dataBuffer, 16);
 8000938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800093c:	2210      	movs	r2, #16
 800093e:	494f      	ldr	r1, [pc, #316]	; (8000a7c <main+0x1e4>)
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fbf3 	bl	800312c <strncpy>
	  printf("String Buffer = %s\n", stringBuffer);
 8000946:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094a:	4619      	mov	r1, r3
 800094c:	484e      	ldr	r0, [pc, #312]	; (8000a88 <main+0x1f0>)
 800094e:	f002 fb7f 	bl	8003050 <iprintf>

	  // Split the string into two substrings
	  char* spo2Substring = strtok(stringBuffer, ",");
 8000952:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000956:	494d      	ldr	r1, [pc, #308]	; (8000a8c <main+0x1f4>)
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fbfb 	bl	8003154 <strtok>
 800095e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  char* heartRateSubstring = strtok(NULL, ",");
 8000962:	494a      	ldr	r1, [pc, #296]	; (8000a8c <main+0x1f4>)
 8000964:	2000      	movs	r0, #0
 8000966:	f002 fbf5 	bl	8003154 <strtok>
 800096a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	  if (spo2Substring != NULL && heartRateSubstring != NULL)
 800096e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000972:	2b00      	cmp	r3, #0
 8000974:	d06c      	beq.n	8000a50 <main+0x1b8>
 8000976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800097a:	2b00      	cmp	r3, #0
 800097c:	d068      	beq.n	8000a50 <main+0x1b8>
	  {
		  // Convert substrings to integers
		  unsigned int spo2Value = atoi(spo2Substring);
 800097e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000982:	f002 f9f3 	bl	8002d6c <atoi>
 8000986:	4603      	mov	r3, r0
 8000988:	67fb      	str	r3, [r7, #124]	; 0x7c
		  unsigned int heartRateValue = atoi(heartRateSubstring);
 800098a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800098e:	f002 f9ed 	bl	8002d6c <atoi>
 8000992:	4603      	mov	r3, r0
 8000994:	67bb      	str	r3, [r7, #120]	; 0x78

		  char spo2String[16];
		  if (spo2Value < 92){
 8000996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000998:	2b5b      	cmp	r3, #91	; 0x5b
 800099a:	d807      	bhi.n	80009ac <main+0x114>
			  sprintf(spo2String, "Spo2: %d !!!", spo2Value);
 800099c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80009a2:	493b      	ldr	r1, [pc, #236]	; (8000a90 <main+0x1f8>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f9e5 	bl	8002d74 <siprintf>
 80009aa:	e006      	b.n	80009ba <main+0x122>
		  } else {
			  sprintf(spo2String, "Spo2: %d", spo2Value);
 80009ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80009b2:	4938      	ldr	r1, [pc, #224]	; (8000a94 <main+0x1fc>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 f9dd 	bl	8002d74 <siprintf>
		  }

		  char heartRateString[16];
		  if (heartRateValue > 160){
 80009ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009bc:	2ba0      	cmp	r3, #160	; 0xa0
 80009be:	d907      	bls.n	80009d0 <main+0x138>
			  sprintf(heartRateString, "HR: %d HIGH", heartRateValue);
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80009c6:	4934      	ldr	r1, [pc, #208]	; (8000a98 <main+0x200>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 f9d3 	bl	8002d74 <siprintf>
 80009ce:	e011      	b.n	80009f4 <main+0x15c>
		  } else if(heartRateValue < 50) {
 80009d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009d2:	2b31      	cmp	r3, #49	; 0x31
 80009d4:	d807      	bhi.n	80009e6 <main+0x14e>
			  sprintf(heartRateString, "HR: %d LOW", heartRateValue);
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80009dc:	492f      	ldr	r1, [pc, #188]	; (8000a9c <main+0x204>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f9c8 	bl	8002d74 <siprintf>
 80009e4:	e006      	b.n	80009f4 <main+0x15c>
		  } else {
			  sprintf(heartRateString, "HR: %d", heartRateValue);
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80009ec:	492c      	ldr	r1, [pc, #176]	; (8000aa0 <main+0x208>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 f9c0 	bl	8002d74 <siprintf>
		  }


		  // Print values to console
		  printf("%s\n", spo2String);
 80009f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fb8f 	bl	800311c <puts>
		  printf("%s\n", heartRateString);
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fb8a 	bl	800311c <puts>

		  // Update LCD or perform other actions with the extracted values
		  Lcd_clear(&lcd);
 8000a08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe4b 	bl	80006a8 <Lcd_clear>
		  Lcd_cursor(&lcd, 0, 0);
 8000a12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe2a 	bl	8000674 <Lcd_cursor>
		  Lcd_string(&lcd, spo2String);
 8000a20:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe02 	bl	8000634 <Lcd_string>
		  Lcd_cursor(&lcd, 1, 0);
 8000a30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fe1b 	bl	8000674 <Lcd_cursor>
		  Lcd_string(&lcd, heartRateString);
 8000a3e:	f107 0218 	add.w	r2, r7, #24
 8000a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fdf3 	bl	8000634 <Lcd_string>
	  {
 8000a4e:	e002      	b.n	8000a56 <main+0x1be>
	  }
	  else
	  {
		  printf("Invalid data format\n");
 8000a50:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <main+0x20c>)
 8000a52:	f002 fb63 	bl	800311c <puts>
	  }

	  // Clear the data buffer for the next transmission
	  memset(dataBuffer, 0, sizeof(dataBuffer));
 8000a56:	2210      	movs	r2, #16
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <main+0x1e4>)
 8000a5c:	f002 fbd6 	bl	800320c <memset>
  {
 8000a60:	e75d      	b.n	800091e <main+0x86>
 8000a62:	bf00      	nop
 8000a64:	08004404 	.word	0x08004404
 8000a68:	08004414 	.word	0x08004414
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	08004360 	.word	0x08004360
 8000a74:	0800436c 	.word	0x0800436c
 8000a78:	0800437c 	.word	0x0800437c
 8000a7c:	2000011c 	.word	0x2000011c
 8000a80:	20000084 	.word	0x20000084
 8000a84:	0800438c 	.word	0x0800438c
 8000a88:	0800439c 	.word	0x0800439c
 8000a8c:	080043b0 	.word	0x080043b0
 8000a90:	080043b4 	.word	0x080043b4
 8000a94:	080043c4 	.word	0x080043c4
 8000a98:	080043d0 	.word	0x080043d0
 8000a9c:	080043dc 	.word	0x080043dc
 8000aa0:	080043e8 	.word	0x080043e8
 8000aa4:	080043f0 	.word	0x080043f0

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	; 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	2230      	movs	r2, #48	; 0x30
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fba8 	bl	800320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <SystemClock_Config+0xcc>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a27      	ldr	r2, [pc, #156]	; (8000b74 <SystemClock_Config+0xcc>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <SystemClock_Config+0xcc>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <SystemClock_Config+0xd0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000af4:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <SystemClock_Config+0xd0>)
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemClock_Config+0xd0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000b20:	2354      	movs	r3, #84	; 0x54
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 f9c1 	bl	8001eb8 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b3c:	f000 f922 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	230f      	movs	r3, #15
 8000b42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fc23 	bl	80023a8 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b68:	f000 f90c 	bl	8000d84 <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3750      	adds	r7, #80	; 0x50
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b82:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <MX_I2C1_Init+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x58>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 8;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b94:	2208      	movs	r2, #8
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 8;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba8:	2208      	movs	r2, #8
 8000baa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bba:	f000 fe15 	bl	80017e8 <HAL_I2C_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc4:	f000 f8de 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000084 	.word	0x20000084
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	000186a0 	.word	0x000186a0

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART2_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f001 fdea 	bl	80027e8 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f8b3 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000d8 	.word	0x200000d8
 8000c28:	40004400 	.word	0x40004400

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b4b      	ldr	r3, [pc, #300]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a4a      	ldr	r2, [pc, #296]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b48      	ldr	r3, [pc, #288]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a43      	ldr	r2, [pc, #268]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a3c      	ldr	r2, [pc, #240]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a35      	ldr	r2, [pc, #212]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	21e0      	movs	r1, #224	; 0xe0
 8000cb6:	4830      	ldr	r0, [pc, #192]	; (8000d78 <MX_GPIO_Init+0x14c>)
 8000cb8:	f000 fd64 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	482e      	ldr	r0, [pc, #184]	; (8000d7c <MX_GPIO_Init+0x150>)
 8000cc2:	f000 fd5f 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2170      	movs	r1, #112	; 0x70
 8000cca:	482d      	ldr	r0, [pc, #180]	; (8000d80 <MX_GPIO_Init+0x154>)
 8000ccc:	f000 fd5a 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4825      	ldr	r0, [pc, #148]	; (8000d7c <MX_GPIO_Init+0x150>)
 8000ce8:	f000 fbc8 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = Green_LED_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000cec:	23e0      	movs	r3, #224	; 0xe0
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	481d      	ldr	r0, [pc, #116]	; (8000d78 <MX_GPIO_Init+0x14c>)
 8000d04:	f000 fbba 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <MX_GPIO_Init+0x154>)
 8000d1e:	f000 fbad 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4810      	ldr	r0, [pc, #64]	; (8000d7c <MX_GPIO_Init+0x150>)
 8000d3a:	f000 fb9f 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d3e:	2370      	movs	r3, #112	; 0x70
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <MX_GPIO_Init+0x154>)
 8000d56:	f000 fb91 	bl	800147c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2006      	movs	r0, #6
 8000d60:	f000 fb55 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d64:	2006      	movs	r0, #6
 8000d66:	f000 fb6e 	bl	8001446 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40020400 	.word	0x40020400

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dce:	2007      	movs	r0, #7
 8000dd0:	f000 fb12 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_I2C_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12c      	bne.n	8000e5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e1e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e24:	2312      	movs	r3, #18
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e30:	2304      	movs	r3, #4
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480c      	ldr	r0, [pc, #48]	; (8000e6c <HAL_I2C_MspInit+0x8c>)
 8000e3c:	f000 fb1e 	bl	800147c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_I2C_MspInit+0x88>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40005400 	.word	0x40005400
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12b      	bne.n	8000eea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0x8c>)
 8000ee6:	f000 fac9 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f940 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f000 fc2d 	bl	80017b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  return 1;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_kill>:

int _kill(int pid, int sig)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f7c:	f002 f94e 	bl	800321c <__errno>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2216      	movs	r2, #22
 8000f84:	601a      	str	r2, [r3, #0]
  return -1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_exit>:

void _exit (int status)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffe7 	bl	8000f72 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fa4:	e7fe      	b.n	8000fa4 <_exit+0x12>

08000fa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e00a      	b.n	8000fce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb8:	f3af 8000 	nop.w
 8000fbc:	4601      	mov	r1, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	b2ca      	uxtb	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dbf0      	blt.n	8000fb8 <_read+0x12>
  }

  return len;
 8000fd6:	687b      	ldr	r3, [r7, #4]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001008:	605a      	str	r2, [r3, #4]
  return 0;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_isatty>:

int _isatty(int file)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001020:	2301      	movs	r3, #1
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f002 f8d0 	bl	800321c <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20018000 	.word	0x20018000
 80010a8:	00004000 	.word	0x00004000
 80010ac:	2000012c 	.word	0x2000012c
 80010b0:	20000280 	.word	0x20000280

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010de:	490e      	ldr	r1, [pc, #56]	; (8001118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f4:	4c0b      	ldr	r4, [pc, #44]	; (8001124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001102:	f7ff ffd7 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f002 f88f 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fbc5 	bl	8000898 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001110:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800111c:	0800462c 	.word	0x0800462c
  ldr r2, =_sbss
 8001120:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001124:	20000280 	.word	0x20000280

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_Init+0x40>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_Init+0x40>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_Init+0x40>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f94f 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fe16 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f967 	bl	8001462 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ac:	f000 f92f 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000130 	.word	0x20000130

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000130 	.word	0x20000130

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008

08001258 <__NVIC_SetPriorityGrouping>:
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff3e 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff8e 	bl	800134c <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff31 	bl	80012bc <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	e159      	b.n	800174c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8148 	bne.w	8001746 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d005      	beq.n	80014ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d130      	bne.n	8001530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 0201 	and.w	r2, r3, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b03      	cmp	r3, #3
 800153a:	d017      	beq.n	800156c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d123      	bne.n	80015c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	69b9      	ldr	r1, [r7, #24]
 80015bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0203 	and.w	r2, r3, #3
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a2 	beq.w	8001746 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b57      	ldr	r3, [pc, #348]	; (8001764 <HAL_GPIO_Init+0x2e8>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a56      	ldr	r2, [pc, #344]	; (8001764 <HAL_GPIO_Init+0x2e8>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b54      	ldr	r3, [pc, #336]	; (8001764 <HAL_GPIO_Init+0x2e8>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161e:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_GPIO_Init+0x2ec>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a49      	ldr	r2, [pc, #292]	; (800176c <HAL_GPIO_Init+0x2f0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d019      	beq.n	800167e <HAL_GPIO_Init+0x202>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a48      	ldr	r2, [pc, #288]	; (8001770 <HAL_GPIO_Init+0x2f4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0x1fe>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a47      	ldr	r2, [pc, #284]	; (8001774 <HAL_GPIO_Init+0x2f8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x1fa>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a46      	ldr	r2, [pc, #280]	; (8001778 <HAL_GPIO_Init+0x2fc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x1f6>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a45      	ldr	r2, [pc, #276]	; (800177c <HAL_GPIO_Init+0x300>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x1f2>
 800166a:	2304      	movs	r3, #4
 800166c:	e008      	b.n	8001680 <HAL_GPIO_Init+0x204>
 800166e:	2307      	movs	r3, #7
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x204>
 8001672:	2303      	movs	r3, #3
 8001674:	e004      	b.n	8001680 <HAL_GPIO_Init+0x204>
 8001676:	2302      	movs	r3, #2
 8001678:	e002      	b.n	8001680 <HAL_GPIO_Init+0x204>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x204>
 800167e:	2300      	movs	r3, #0
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f002 0203 	and.w	r2, r2, #3
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	4093      	lsls	r3, r2
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001690:	4935      	ldr	r1, [pc, #212]	; (8001768 <HAL_GPIO_Init+0x2ec>)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016c2:	4a2f      	ldr	r2, [pc, #188]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016ec:	4a24      	ldr	r2, [pc, #144]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_GPIO_Init+0x304>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <HAL_GPIO_Init+0x304>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_GPIO_Init+0x304>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_GPIO_Init+0x304>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b0f      	cmp	r3, #15
 8001750:	f67f aea2 	bls.w	8001498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40013800 	.word	0x40013800
 800176c:	40020000 	.word	0x40020000
 8001770:	40020400 	.word	0x40020400
 8001774:	40020800 	.word	0x40020800
 8001778:	40020c00 	.word	0x40020c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40013c00 	.word	0x40013c00

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f853 	bl	8000882 <HAL_GPIO_EXTI_Callback>
  }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e12b      	b.n	8001a52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fae6 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2224      	movs	r2, #36	; 0x24
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800183a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800184a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800184c:	f000 ffa4 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8001850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a81      	ldr	r2, [pc, #516]	; (8001a5c <HAL_I2C_Init+0x274>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d807      	bhi.n	800186c <HAL_I2C_Init+0x84>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a80      	ldr	r2, [pc, #512]	; (8001a60 <HAL_I2C_Init+0x278>)
 8001860:	4293      	cmp	r3, r2
 8001862:	bf94      	ite	ls
 8001864:	2301      	movls	r3, #1
 8001866:	2300      	movhi	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	e006      	b.n	800187a <HAL_I2C_Init+0x92>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a7d      	ldr	r2, [pc, #500]	; (8001a64 <HAL_I2C_Init+0x27c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	bf94      	ite	ls
 8001874:	2301      	movls	r3, #1
 8001876:	2300      	movhi	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0e7      	b.n	8001a52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4a78      	ldr	r2, [pc, #480]	; (8001a68 <HAL_I2C_Init+0x280>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0c9b      	lsrs	r3, r3, #18
 800188c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	430a      	orrs	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_I2C_Init+0x274>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d802      	bhi.n	80018bc <HAL_I2C_Init+0xd4>
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3301      	adds	r3, #1
 80018ba:	e009      	b.n	80018d0 <HAL_I2C_Init+0xe8>
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	4a69      	ldr	r2, [pc, #420]	; (8001a6c <HAL_I2C_Init+0x284>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	3301      	adds	r3, #1
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	495c      	ldr	r1, [pc, #368]	; (8001a5c <HAL_I2C_Init+0x274>)
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d819      	bhi.n	8001924 <HAL_I2C_Init+0x13c>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e59      	subs	r1, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80018fe:	1c59      	adds	r1, r3, #1
 8001900:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001904:	400b      	ands	r3, r1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00a      	beq.n	8001920 <HAL_I2C_Init+0x138>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e59      	subs	r1, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fbb1 f3f3 	udiv	r3, r1, r3
 8001918:	3301      	adds	r3, #1
 800191a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191e:	e051      	b.n	80019c4 <HAL_I2C_Init+0x1dc>
 8001920:	2304      	movs	r3, #4
 8001922:	e04f      	b.n	80019c4 <HAL_I2C_Init+0x1dc>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d111      	bne.n	8001950 <HAL_I2C_Init+0x168>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	440b      	add	r3, r1
 800193a:	fbb0 f3f3 	udiv	r3, r0, r3
 800193e:	3301      	adds	r3, #1
 8001940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e012      	b.n	8001976 <HAL_I2C_Init+0x18e>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	0099      	lsls	r1, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	fbb0 f3f3 	udiv	r3, r0, r3
 8001966:	3301      	adds	r3, #1
 8001968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Init+0x196>
 800197a:	2301      	movs	r3, #1
 800197c:	e022      	b.n	80019c4 <HAL_I2C_Init+0x1dc>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10e      	bne.n	80019a4 <HAL_I2C_Init+0x1bc>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1e58      	subs	r0, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	440b      	add	r3, r1
 8001994:	fbb0 f3f3 	udiv	r3, r0, r3
 8001998:	3301      	adds	r3, #1
 800199a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a2:	e00f      	b.n	80019c4 <HAL_I2C_Init+0x1dc>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e58      	subs	r0, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	0099      	lsls	r1, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	6809      	ldr	r1, [r1, #0]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6911      	ldr	r1, [r2, #16]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68d2      	ldr	r2, [r2, #12]
 80019fe:	4311      	orrs	r1, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	000186a0 	.word	0x000186a0
 8001a60:	001e847f 	.word	0x001e847f
 8001a64:	003d08ff 	.word	0x003d08ff
 8001a68:	431bde83 	.word	0x431bde83
 8001a6c:	10624dd3 	.word	0x10624dd3

08001a70 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff fbba 	bl	80011f8 <HAL_GetTick>
 8001a84:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	f040 80ee 	bne.w	8001c70 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_I2C_Slave_Receive+0x30>
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0e6      	b.n	8001c72 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Slave_Receive+0x42>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e0df      	b.n	8001c72 <HAL_I2C_Slave_Receive+0x202>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d007      	beq.n	8001ad8 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae6:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2222      	movs	r2, #34	; 0x22
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	88fa      	ldrh	r2, [r7, #6]
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <HAL_I2C_Slave_Receive+0x20c>)
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b28:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	4953      	ldr	r1, [pc, #332]	; (8001c80 <HAL_I2C_Slave_Receive+0x210>)
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f8a5 	bl	8001c84 <I2C_WaitOnFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e096      	b.n	8001c72 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8001b5a:	e04e      	b.n	8001bfa <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f923 	bl	8001dac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d009      	beq.n	8001b80 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7a:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e078      	b.n	8001c72 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d11c      	bne.n	8001bfa <HAL_I2C_Slave_Receive+0x18a>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d018      	beq.n	8001bfa <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ac      	bne.n	8001b5c <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f893 	bl	8001d32 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c20:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e025      	b.n	8001c72 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0201 	orr.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	ffff0000 	.word	0xffff0000
 8001c80:	00010002 	.word	0x00010002

08001c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c94:	e025      	b.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c9c:	d021      	beq.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9e:	f7ff faab 	bl	80011f8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d302      	bcc.n	8001cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d116      	bne.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f043 0220 	orr.w	r2, r3, #32
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e023      	b.n	8001d2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10d      	bne.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	e00c      	b.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4013      	ands	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf0c      	ite	eq
 8001d1a:	2301      	moveq	r3, #1
 8001d1c:	2300      	movne	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d0b6      	beq.n	8001c96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d3e:	e029      	b.n	8001d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 f889 	bl	8001e58 <I2C_IsAcknowledgeFailed>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e029      	b.n	8001da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d50:	f7ff fa52 	bl	80011f8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d302      	bcc.n	8001d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e007      	b.n	8001da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d1ce      	bne.n	8001d40 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001db8:	e042      	b.n	8001e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d119      	bne.n	8001dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0210 	mvn.w	r2, #16
 8001dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e029      	b.n	8001e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfc:	f7ff f9fc 	bl	80011f8 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d302      	bcc.n	8001e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f043 0220 	orr.w	r2, r3, #32
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e007      	b.n	8001e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	d1b5      	bne.n	8001dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6e:	d11b      	bne.n	8001ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e267      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d075      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d00c      	beq.n	8001efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	4b85      	ldr	r3, [pc, #532]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d112      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eee:	4b82      	ldr	r3, [pc, #520]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efa:	d10b      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d05b      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x108>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d157      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e242      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x74>
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a75      	ldr	r2, [pc, #468]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xb0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b70      	ldr	r3, [pc, #448]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6f      	ldr	r2, [pc, #444]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6c      	ldr	r2, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xb0>
 8001f50:	4b69      	ldr	r3, [pc, #420]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a68      	ldr	r2, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff f942 	bl	80011f8 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff f93e 	bl	80011f8 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e207      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xc0>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff f92e 	bl	80011f8 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f92a 	bl	80011f8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1f3      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xe8>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fce:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe6:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x152>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1c7      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4937      	ldr	r1, [pc, #220]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_RCC_OscConfig+0x244>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff f8e3 	bl	80011f8 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff f8df 	bl	80011f8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1a8      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4925      	ldr	r1, [pc, #148]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x244>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff f8c2 	bl	80011f8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff f8be 	bl	80011f8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e187      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d036      	beq.n	8002110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_RCC_OscConfig+0x248>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f8a2 	bl	80011f8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff f89e 	bl	80011f8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e167      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_OscConfig+0x240>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x200>
 80020d6:	e01b      	b.n	8002110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_OscConfig+0x248>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7ff f88b 	bl	80011f8 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	e00e      	b.n	8002104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e6:	f7ff f887 	bl	80011f8 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d907      	bls.n	8002104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e150      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470000 	.word	0x42470000
 8002100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ea      	bne.n	80020e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8097 	beq.w	800224c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002122:	4b81      	ldr	r3, [pc, #516]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b7d      	ldr	r3, [pc, #500]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a7c      	ldr	r2, [pc, #496]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b7a      	ldr	r3, [pc, #488]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b77      	ldr	r3, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x474>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d118      	bne.n	800218c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215a:	4b74      	ldr	r3, [pc, #464]	; (800232c <HAL_RCC_OscConfig+0x474>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a73      	ldr	r2, [pc, #460]	; (800232c <HAL_RCC_OscConfig+0x474>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7ff f847 	bl	80011f8 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7ff f843 	bl	80011f8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e10c      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x474>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2ea>
 8002194:	4b64      	ldr	r3, [pc, #400]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a63      	ldr	r2, [pc, #396]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	e01c      	b.n	80021dc <HAL_RCC_OscConfig+0x324>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x30c>
 80021aa:	4b5f      	ldr	r3, [pc, #380]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a5e      	ldr	r2, [pc, #376]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a5b      	ldr	r2, [pc, #364]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0x324>
 80021c4:	4b58      	ldr	r3, [pc, #352]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	4a57      	ldr	r2, [pc, #348]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	; 0x70
 80021d0:	4b55      	ldr	r3, [pc, #340]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a54      	ldr	r2, [pc, #336]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7ff f808 	bl	80011f8 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7ff f804 	bl	80011f8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0cb      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	4b49      	ldr	r3, [pc, #292]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ee      	beq.n	80021ec <HAL_RCC_OscConfig+0x334>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7fe fff2 	bl	80011f8 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe ffee 	bl	80011f8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0b5      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ee      	bne.n	8002218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002240:	4b39      	ldr	r3, [pc, #228]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a38      	ldr	r2, [pc, #224]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a1 	beq.w	8002398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b08      	cmp	r3, #8
 8002260:	d05c      	beq.n	800231c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d141      	bne.n	80022ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_RCC_OscConfig+0x478>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe ffc2 	bl	80011f8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe ffbe 	bl	80011f8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e087      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	3b01      	subs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	491b      	ldr	r1, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x478>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe ff97 	bl	80011f8 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7fe ff93 	bl	80011f8 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e05c      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x416>
 80022ec:	e054      	b.n	8002398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_RCC_OscConfig+0x478>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe ff80 	bl	80011f8 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe ff7c 	bl	80011f8 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e045      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_OscConfig+0x470>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x444>
 800231a:	e03d      	b.n	8002398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e038      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000
 8002330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4ec>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d028      	beq.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d121      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d11a      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800236a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800236c:	4293      	cmp	r3, r2
 800236e:	d111      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	3b01      	subs	r3, #1
 800237e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d107      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0cc      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b68      	ldr	r3, [pc, #416]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d90c      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a52      	ldr	r2, [pc, #328]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494d      	ldr	r1, [pc, #308]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d044      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d119      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e067      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4934      	ldr	r1, [pc, #208]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7fe feae 	bl	80011f8 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe feaa 	bl	80011f8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e04f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d20c      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e032      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4916      	ldr	r1, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490e      	ldr	r1, [pc, #56]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f821 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490a      	ldr	r1, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fe0e 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023c00 	.word	0x40023c00
 8002564:	40023800 	.word	0x40023800
 8002568:	08004420 	.word	0x08004420
 800256c:	20000000 	.word	0x20000000
 8002570:	20000004 	.word	0x20000004

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002578:	b094      	sub	sp, #80	; 0x50
 800257a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	647b      	str	r3, [r7, #68]	; 0x44
 8002580:	2300      	movs	r3, #0
 8002582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002584:	2300      	movs	r3, #0
 8002586:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258c:	4b79      	ldr	r3, [pc, #484]	; (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d00d      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002598:	2b08      	cmp	r3, #8
 800259a:	f200 80e1 	bhi.w	8002760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x34>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x3a>
 80025a6:	e0db      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b73      	ldr	r3, [pc, #460]	; (8002778 <HAL_RCC_GetSysClockFreq+0x204>)
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025ac:	e0db      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_GetSysClockFreq+0x208>)
 80025b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b2:	e0d8      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b4:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025be:	4b6d      	ldr	r3, [pc, #436]	; (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ca:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	2200      	movs	r2, #0
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
 80025e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025e6:	4622      	mov	r2, r4
 80025e8:	462b      	mov	r3, r5
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	0159      	lsls	r1, r3, #5
 80025f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f8:	0150      	lsls	r0, r2, #5
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4621      	mov	r1, r4
 8002600:	1a51      	subs	r1, r2, r1
 8002602:	6139      	str	r1, [r7, #16]
 8002604:	4629      	mov	r1, r5
 8002606:	eb63 0301 	sbc.w	r3, r3, r1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002618:	4659      	mov	r1, fp
 800261a:	018b      	lsls	r3, r1, #6
 800261c:	4651      	mov	r1, sl
 800261e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002622:	4651      	mov	r1, sl
 8002624:	018a      	lsls	r2, r1, #6
 8002626:	4651      	mov	r1, sl
 8002628:	ebb2 0801 	subs.w	r8, r2, r1
 800262c:	4659      	mov	r1, fp
 800262e:	eb63 0901 	sbc.w	r9, r3, r1
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800263e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002646:	4690      	mov	r8, r2
 8002648:	4699      	mov	r9, r3
 800264a:	4623      	mov	r3, r4
 800264c:	eb18 0303 	adds.w	r3, r8, r3
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	462b      	mov	r3, r5
 8002654:	eb49 0303 	adc.w	r3, r9, r3
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002666:	4629      	mov	r1, r5
 8002668:	024b      	lsls	r3, r1, #9
 800266a:	4621      	mov	r1, r4
 800266c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002670:	4621      	mov	r1, r4
 8002672:	024a      	lsls	r2, r1, #9
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267a:	2200      	movs	r2, #0
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
 800267e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002684:	f7fd fe04 	bl	8000290 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002690:	e058      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	2200      	movs	r2, #0
 800269a:	4618      	mov	r0, r3
 800269c:	4611      	mov	r1, r2
 800269e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026a2:	623b      	str	r3, [r7, #32]
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026ac:	4642      	mov	r2, r8
 80026ae:	464b      	mov	r3, r9
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	0159      	lsls	r1, r3, #5
 80026ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026be:	0150      	lsls	r0, r2, #5
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4641      	mov	r1, r8
 80026c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ca:	4649      	mov	r1, r9
 80026cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026e4:	ebb2 040a 	subs.w	r4, r2, sl
 80026e8:	eb63 050b 	sbc.w	r5, r3, fp
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	00eb      	lsls	r3, r5, #3
 80026f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	4643      	mov	r3, r8
 8002702:	18e3      	adds	r3, r4, r3
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	464b      	mov	r3, r9
 8002708:	eb45 0303 	adc.w	r3, r5, r3
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800271a:	4629      	mov	r1, r5
 800271c:	028b      	lsls	r3, r1, #10
 800271e:	4621      	mov	r1, r4
 8002720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002724:	4621      	mov	r1, r4
 8002726:	028a      	lsls	r2, r1, #10
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272e:	2200      	movs	r2, #0
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	61fa      	str	r2, [r7, #28]
 8002734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002738:	f7fd fdaa 	bl	8000290 <__aeabi_uldivmod>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4613      	mov	r3, r2
 8002742:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800275e:	e002      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetSysClockFreq+0x204>)
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002768:	4618      	mov	r0, r3
 800276a:	3750      	adds	r7, #80	; 0x50
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	00f42400 	.word	0x00f42400
 800277c:	007a1200 	.word	0x007a1200

08002780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCC_GetHCLKFreq+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000000 	.word	0x20000000

08002798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800279c:	f7ff fff0 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0a9b      	lsrs	r3, r3, #10
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	08004430 	.word	0x08004430

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027c4:	f7ff ffdc 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0b5b      	lsrs	r3, r3, #13
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4903      	ldr	r1, [pc, #12]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08004430 	.word	0x08004430

080027e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e03f      	b.n	800287a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fb2e 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2224      	movs	r2, #36	; 0x24
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800282a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f829 	bl	8002884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002888:	b0c0      	sub	sp, #256	; 0x100
 800288a:	af00      	add	r7, sp, #0
 800288c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a0:	68d9      	ldr	r1, [r3, #12]
 80028a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	ea40 0301 	orr.w	r3, r0, r1
 80028ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028dc:	f021 010c 	bic.w	r1, r1, #12
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028ea:	430b      	orrs	r3, r1
 80028ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fe:	6999      	ldr	r1, [r3, #24]
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	ea40 0301 	orr.w	r3, r0, r1
 800290a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <UART_SetConfig+0x2cc>)
 8002914:	429a      	cmp	r2, r3
 8002916:	d005      	beq.n	8002924 <UART_SetConfig+0xa0>
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b8d      	ldr	r3, [pc, #564]	; (8002b54 <UART_SetConfig+0x2d0>)
 8002920:	429a      	cmp	r2, r3
 8002922:	d104      	bne.n	800292e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002924:	f7ff ff4c 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8002928:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800292c:	e003      	b.n	8002936 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800292e:	f7ff ff33 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8002932:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002940:	f040 810c 	bne.w	8002b5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002948:	2200      	movs	r2, #0
 800294a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800294e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002956:	4622      	mov	r2, r4
 8002958:	462b      	mov	r3, r5
 800295a:	1891      	adds	r1, r2, r2
 800295c:	65b9      	str	r1, [r7, #88]	; 0x58
 800295e:	415b      	adcs	r3, r3
 8002960:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002966:	4621      	mov	r1, r4
 8002968:	eb12 0801 	adds.w	r8, r2, r1
 800296c:	4629      	mov	r1, r5
 800296e:	eb43 0901 	adc.w	r9, r3, r1
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800297e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002986:	4690      	mov	r8, r2
 8002988:	4699      	mov	r9, r3
 800298a:	4623      	mov	r3, r4
 800298c:	eb18 0303 	adds.w	r3, r8, r3
 8002990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002994:	462b      	mov	r3, r5
 8002996:	eb49 0303 	adc.w	r3, r9, r3
 800299a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800299e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029b2:	460b      	mov	r3, r1
 80029b4:	18db      	adds	r3, r3, r3
 80029b6:	653b      	str	r3, [r7, #80]	; 0x50
 80029b8:	4613      	mov	r3, r2
 80029ba:	eb42 0303 	adc.w	r3, r2, r3
 80029be:	657b      	str	r3, [r7, #84]	; 0x54
 80029c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029c8:	f7fd fc62 	bl	8000290 <__aeabi_uldivmod>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4b61      	ldr	r3, [pc, #388]	; (8002b58 <UART_SetConfig+0x2d4>)
 80029d2:	fba3 2302 	umull	r2, r3, r3, r2
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	011c      	lsls	r4, r3, #4
 80029da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029ec:	4642      	mov	r2, r8
 80029ee:	464b      	mov	r3, r9
 80029f0:	1891      	adds	r1, r2, r2
 80029f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80029f4:	415b      	adcs	r3, r3
 80029f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029fc:	4641      	mov	r1, r8
 80029fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002a02:	4649      	mov	r1, r9
 8002a04:	eb43 0b01 	adc.w	fp, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a1c:	4692      	mov	sl, r2
 8002a1e:	469b      	mov	fp, r3
 8002a20:	4643      	mov	r3, r8
 8002a22:	eb1a 0303 	adds.w	r3, sl, r3
 8002a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	18db      	adds	r3, r3, r3
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a4e:	4613      	mov	r3, r2
 8002a50:	eb42 0303 	adc.w	r3, r2, r3
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44
 8002a56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a5e:	f7fd fc17 	bl	8000290 <__aeabi_uldivmod>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <UART_SetConfig+0x2d4>)
 8002a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	2264      	movs	r2, #100	; 0x64
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	1acb      	subs	r3, r1, r3
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a7e:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <UART_SetConfig+0x2d4>)
 8002a80:	fba3 2302 	umull	r2, r3, r3, r2
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a8c:	441c      	add	r4, r3
 8002a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	1891      	adds	r1, r2, r2
 8002aa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002aa8:	415b      	adcs	r3, r3
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	1851      	adds	r1, r2, r1
 8002ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	414b      	adcs	r3, r1
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ac8:	4659      	mov	r1, fp
 8002aca:	00cb      	lsls	r3, r1, #3
 8002acc:	4651      	mov	r1, sl
 8002ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	00ca      	lsls	r2, r1, #3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	4642      	mov	r2, r8
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ae4:	464b      	mov	r3, r9
 8002ae6:	460a      	mov	r2, r1
 8002ae8:	eb42 0303 	adc.w	r3, r2, r3
 8002aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002afc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b04:	460b      	mov	r3, r1
 8002b06:	18db      	adds	r3, r3, r3
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	eb42 0303 	adc.w	r3, r2, r3
 8002b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b1a:	f7fd fbb9 	bl	8000290 <__aeabi_uldivmod>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <UART_SetConfig+0x2d4>)
 8002b24:	fba3 1302 	umull	r1, r3, r3, r2
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	2164      	movs	r1, #100	; 0x64
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	3332      	adds	r3, #50	; 0x32
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <UART_SetConfig+0x2d4>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	f003 0207 	and.w	r2, r3, #7
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4422      	add	r2, r4
 8002b4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b4c:	e106      	b.n	8002d5c <UART_SetConfig+0x4d8>
 8002b4e:	bf00      	nop
 8002b50:	40011000 	.word	0x40011000
 8002b54:	40011400 	.word	0x40011400
 8002b58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b6e:	4642      	mov	r2, r8
 8002b70:	464b      	mov	r3, r9
 8002b72:	1891      	adds	r1, r2, r2
 8002b74:	6239      	str	r1, [r7, #32]
 8002b76:	415b      	adcs	r3, r3
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b7e:	4641      	mov	r1, r8
 8002b80:	1854      	adds	r4, r2, r1
 8002b82:	4649      	mov	r1, r9
 8002b84:	eb43 0501 	adc.w	r5, r3, r1
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	00eb      	lsls	r3, r5, #3
 8002b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b96:	00e2      	lsls	r2, r4, #3
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	4643      	mov	r3, r8
 8002b9e:	18e3      	adds	r3, r4, r3
 8002ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ba4:	464b      	mov	r3, r9
 8002ba6:	eb45 0303 	adc.w	r3, r5, r3
 8002baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bca:	4629      	mov	r1, r5
 8002bcc:	008b      	lsls	r3, r1, #2
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	008a      	lsls	r2, r1, #2
 8002bd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bdc:	f7fd fb58 	bl	8000290 <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4b60      	ldr	r3, [pc, #384]	; (8002d68 <UART_SetConfig+0x4e4>)
 8002be6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	011c      	lsls	r4, r3, #4
 8002bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c00:	4642      	mov	r2, r8
 8002c02:	464b      	mov	r3, r9
 8002c04:	1891      	adds	r1, r2, r2
 8002c06:	61b9      	str	r1, [r7, #24]
 8002c08:	415b      	adcs	r3, r3
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c10:	4641      	mov	r1, r8
 8002c12:	1851      	adds	r1, r2, r1
 8002c14:	6139      	str	r1, [r7, #16]
 8002c16:	4649      	mov	r1, r9
 8002c18:	414b      	adcs	r3, r1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c28:	4659      	mov	r1, fp
 8002c2a:	00cb      	lsls	r3, r1, #3
 8002c2c:	4651      	mov	r1, sl
 8002c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c32:	4651      	mov	r1, sl
 8002c34:	00ca      	lsls	r2, r1, #3
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c44:	464b      	mov	r3, r9
 8002c46:	460a      	mov	r2, r1
 8002c48:	eb42 0303 	adc.w	r3, r2, r3
 8002c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c68:	4649      	mov	r1, r9
 8002c6a:	008b      	lsls	r3, r1, #2
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c72:	4641      	mov	r1, r8
 8002c74:	008a      	lsls	r2, r1, #2
 8002c76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c7a:	f7fd fb09 	bl	8000290 <__aeabi_uldivmod>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <UART_SetConfig+0x4e4>)
 8002c86:	fba3 2301 	umull	r2, r3, r3, r1
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2264      	movs	r2, #100	; 0x64
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	1acb      	subs	r3, r1, r3
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	3332      	adds	r3, #50	; 0x32
 8002c98:	4a33      	ldr	r2, [pc, #204]	; (8002d68 <UART_SetConfig+0x4e4>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca4:	441c      	add	r4, r3
 8002ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002caa:	2200      	movs	r2, #0
 8002cac:	673b      	str	r3, [r7, #112]	; 0x70
 8002cae:	677a      	str	r2, [r7, #116]	; 0x74
 8002cb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	1851      	adds	r1, r2, r1
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	4649      	mov	r1, r9
 8002ccc:	414b      	adcs	r3, r1
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cdc:	4659      	mov	r1, fp
 8002cde:	00cb      	lsls	r3, r1, #3
 8002ce0:	4651      	mov	r1, sl
 8002ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ce6:	4651      	mov	r1, sl
 8002ce8:	00ca      	lsls	r2, r1, #3
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	eb42 0303 	adc.w	r3, r2, r3
 8002cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	663b      	str	r3, [r7, #96]	; 0x60
 8002d0a:	667a      	str	r2, [r7, #100]	; 0x64
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d18:	4649      	mov	r1, r9
 8002d1a:	008b      	lsls	r3, r1, #2
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d22:	4641      	mov	r1, r8
 8002d24:	008a      	lsls	r2, r1, #2
 8002d26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d2a:	f7fd fab1 	bl	8000290 <__aeabi_uldivmod>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <UART_SetConfig+0x4e4>)
 8002d34:	fba3 1302 	umull	r1, r3, r3, r2
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	2164      	movs	r1, #100	; 0x64
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	3332      	adds	r3, #50	; 0x32
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <UART_SetConfig+0x4e4>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4422      	add	r2, r4
 8002d5a:	609a      	str	r2, [r3, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d62:	46bd      	mov	sp, r7
 8002d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d68:	51eb851f 	.word	0x51eb851f

08002d6c <atoi>:
 8002d6c:	220a      	movs	r2, #10
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f000 b946 	b.w	8003000 <strtol>

08002d74 <siprintf>:
 8002d74:	b40e      	push	{r1, r2, r3}
 8002d76:	b500      	push	{lr}
 8002d78:	b09c      	sub	sp, #112	; 0x70
 8002d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8002d7c:	9002      	str	r0, [sp, #8]
 8002d7e:	9006      	str	r0, [sp, #24]
 8002d80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d84:	4809      	ldr	r0, [pc, #36]	; (8002dac <siprintf+0x38>)
 8002d86:	9107      	str	r1, [sp, #28]
 8002d88:	9104      	str	r1, [sp, #16]
 8002d8a:	4909      	ldr	r1, [pc, #36]	; (8002db0 <siprintf+0x3c>)
 8002d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d90:	9105      	str	r1, [sp, #20]
 8002d92:	6800      	ldr	r0, [r0, #0]
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	a902      	add	r1, sp, #8
 8002d98:	f000 fae6 	bl	8003368 <_svfiprintf_r>
 8002d9c:	9b02      	ldr	r3, [sp, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	b01c      	add	sp, #112	; 0x70
 8002da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002da8:	b003      	add	sp, #12
 8002daa:	4770      	bx	lr
 8002dac:	20000064 	.word	0x20000064
 8002db0:	ffff0208 	.word	0xffff0208

08002db4 <std>:
 8002db4:	2300      	movs	r3, #0
 8002db6:	b510      	push	{r4, lr}
 8002db8:	4604      	mov	r4, r0
 8002dba:	e9c0 3300 	strd	r3, r3, [r0]
 8002dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dc2:	6083      	str	r3, [r0, #8]
 8002dc4:	8181      	strh	r1, [r0, #12]
 8002dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8002dc8:	81c2      	strh	r2, [r0, #14]
 8002dca:	6183      	str	r3, [r0, #24]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	2208      	movs	r2, #8
 8002dd0:	305c      	adds	r0, #92	; 0x5c
 8002dd2:	f000 fa1b 	bl	800320c <memset>
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <std+0x58>)
 8002dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <std+0x5c>)
 8002ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <std+0x60>)
 8002de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <std+0x64>)
 8002de4:	6323      	str	r3, [r4, #48]	; 0x30
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <std+0x68>)
 8002de8:	6224      	str	r4, [r4, #32]
 8002dea:	429c      	cmp	r4, r3
 8002dec:	d006      	beq.n	8002dfc <std+0x48>
 8002dee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002df2:	4294      	cmp	r4, r2
 8002df4:	d002      	beq.n	8002dfc <std+0x48>
 8002df6:	33d0      	adds	r3, #208	; 0xd0
 8002df8:	429c      	cmp	r4, r3
 8002dfa:	d105      	bne.n	8002e08 <std+0x54>
 8002dfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e04:	f000 ba34 	b.w	8003270 <__retarget_lock_init_recursive>
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	bf00      	nop
 8002e0c:	08003dd1 	.word	0x08003dd1
 8002e10:	08003df3 	.word	0x08003df3
 8002e14:	08003e2b 	.word	0x08003e2b
 8002e18:	08003e4f 	.word	0x08003e4f
 8002e1c:	20000134 	.word	0x20000134

08002e20 <stdio_exit_handler>:
 8002e20:	4a02      	ldr	r2, [pc, #8]	; (8002e2c <stdio_exit_handler+0xc>)
 8002e22:	4903      	ldr	r1, [pc, #12]	; (8002e30 <stdio_exit_handler+0x10>)
 8002e24:	4803      	ldr	r0, [pc, #12]	; (8002e34 <stdio_exit_handler+0x14>)
 8002e26:	f000 b8f5 	b.w	8003014 <_fwalk_sglue>
 8002e2a:	bf00      	nop
 8002e2c:	2000000c 	.word	0x2000000c
 8002e30:	08003d69 	.word	0x08003d69
 8002e34:	20000018 	.word	0x20000018

08002e38 <cleanup_stdio>:
 8002e38:	6841      	ldr	r1, [r0, #4]
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <cleanup_stdio+0x34>)
 8002e3c:	4299      	cmp	r1, r3
 8002e3e:	b510      	push	{r4, lr}
 8002e40:	4604      	mov	r4, r0
 8002e42:	d001      	beq.n	8002e48 <cleanup_stdio+0x10>
 8002e44:	f000 ff90 	bl	8003d68 <_fflush_r>
 8002e48:	68a1      	ldr	r1, [r4, #8]
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <cleanup_stdio+0x38>)
 8002e4c:	4299      	cmp	r1, r3
 8002e4e:	d002      	beq.n	8002e56 <cleanup_stdio+0x1e>
 8002e50:	4620      	mov	r0, r4
 8002e52:	f000 ff89 	bl	8003d68 <_fflush_r>
 8002e56:	68e1      	ldr	r1, [r4, #12]
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <cleanup_stdio+0x3c>)
 8002e5a:	4299      	cmp	r1, r3
 8002e5c:	d004      	beq.n	8002e68 <cleanup_stdio+0x30>
 8002e5e:	4620      	mov	r0, r4
 8002e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e64:	f000 bf80 	b.w	8003d68 <_fflush_r>
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000134 	.word	0x20000134
 8002e70:	2000019c 	.word	0x2000019c
 8002e74:	20000204 	.word	0x20000204

08002e78 <global_stdio_init.part.0>:
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <global_stdio_init.part.0+0x30>)
 8002e7c:	4c0b      	ldr	r4, [pc, #44]	; (8002eac <global_stdio_init.part.0+0x34>)
 8002e7e:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <global_stdio_init.part.0+0x38>)
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	4620      	mov	r0, r4
 8002e84:	2200      	movs	r2, #0
 8002e86:	2104      	movs	r1, #4
 8002e88:	f7ff ff94 	bl	8002db4 <std>
 8002e8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e90:	2201      	movs	r2, #1
 8002e92:	2109      	movs	r1, #9
 8002e94:	f7ff ff8e 	bl	8002db4 <std>
 8002e98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ea2:	2112      	movs	r1, #18
 8002ea4:	f7ff bf86 	b.w	8002db4 <std>
 8002ea8:	2000026c 	.word	0x2000026c
 8002eac:	20000134 	.word	0x20000134
 8002eb0:	08002e21 	.word	0x08002e21

08002eb4 <__sfp_lock_acquire>:
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <__sfp_lock_acquire+0x8>)
 8002eb6:	f000 b9dc 	b.w	8003272 <__retarget_lock_acquire_recursive>
 8002eba:	bf00      	nop
 8002ebc:	20000271 	.word	0x20000271

08002ec0 <__sfp_lock_release>:
 8002ec0:	4801      	ldr	r0, [pc, #4]	; (8002ec8 <__sfp_lock_release+0x8>)
 8002ec2:	f000 b9d7 	b.w	8003274 <__retarget_lock_release_recursive>
 8002ec6:	bf00      	nop
 8002ec8:	20000271 	.word	0x20000271

08002ecc <__sinit>:
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	f7ff fff0 	bl	8002eb4 <__sfp_lock_acquire>
 8002ed4:	6a23      	ldr	r3, [r4, #32]
 8002ed6:	b11b      	cbz	r3, 8002ee0 <__sinit+0x14>
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002edc:	f7ff bff0 	b.w	8002ec0 <__sfp_lock_release>
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <__sinit+0x28>)
 8002ee2:	6223      	str	r3, [r4, #32]
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <__sinit+0x2c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f5      	bne.n	8002ed8 <__sinit+0xc>
 8002eec:	f7ff ffc4 	bl	8002e78 <global_stdio_init.part.0>
 8002ef0:	e7f2      	b.n	8002ed8 <__sinit+0xc>
 8002ef2:	bf00      	nop
 8002ef4:	08002e39 	.word	0x08002e39
 8002ef8:	2000026c 	.word	0x2000026c

08002efc <_strtol_l.constprop.0>:
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f02:	d001      	beq.n	8002f08 <_strtol_l.constprop.0+0xc>
 8002f04:	2b24      	cmp	r3, #36	; 0x24
 8002f06:	d906      	bls.n	8002f16 <_strtol_l.constprop.0+0x1a>
 8002f08:	f000 f988 	bl	800321c <__errno>
 8002f0c:	2316      	movs	r3, #22
 8002f0e:	6003      	str	r3, [r0, #0]
 8002f10:	2000      	movs	r0, #0
 8002f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002ffc <_strtol_l.constprop.0+0x100>
 8002f1a:	460d      	mov	r5, r1
 8002f1c:	462e      	mov	r6, r5
 8002f1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f22:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8002f26:	f017 0708 	ands.w	r7, r7, #8
 8002f2a:	d1f7      	bne.n	8002f1c <_strtol_l.constprop.0+0x20>
 8002f2c:	2c2d      	cmp	r4, #45	; 0x2d
 8002f2e:	d132      	bne.n	8002f96 <_strtol_l.constprop.0+0x9a>
 8002f30:	782c      	ldrb	r4, [r5, #0]
 8002f32:	2701      	movs	r7, #1
 8002f34:	1cb5      	adds	r5, r6, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d05b      	beq.n	8002ff2 <_strtol_l.constprop.0+0xf6>
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d109      	bne.n	8002f52 <_strtol_l.constprop.0+0x56>
 8002f3e:	2c30      	cmp	r4, #48	; 0x30
 8002f40:	d107      	bne.n	8002f52 <_strtol_l.constprop.0+0x56>
 8002f42:	782c      	ldrb	r4, [r5, #0]
 8002f44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002f48:	2c58      	cmp	r4, #88	; 0x58
 8002f4a:	d14d      	bne.n	8002fe8 <_strtol_l.constprop.0+0xec>
 8002f4c:	786c      	ldrb	r4, [r5, #1]
 8002f4e:	2310      	movs	r3, #16
 8002f50:	3502      	adds	r5, #2
 8002f52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8002f56:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002f5a:	f04f 0e00 	mov.w	lr, #0
 8002f5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8002f62:	4676      	mov	r6, lr
 8002f64:	fb03 8a19 	mls	sl, r3, r9, r8
 8002f68:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002f6c:	f1bc 0f09 	cmp.w	ip, #9
 8002f70:	d816      	bhi.n	8002fa0 <_strtol_l.constprop.0+0xa4>
 8002f72:	4664      	mov	r4, ip
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	dd24      	ble.n	8002fc2 <_strtol_l.constprop.0+0xc6>
 8002f78:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8002f7c:	d008      	beq.n	8002f90 <_strtol_l.constprop.0+0x94>
 8002f7e:	45b1      	cmp	r9, r6
 8002f80:	d31c      	bcc.n	8002fbc <_strtol_l.constprop.0+0xc0>
 8002f82:	d101      	bne.n	8002f88 <_strtol_l.constprop.0+0x8c>
 8002f84:	45a2      	cmp	sl, r4
 8002f86:	db19      	blt.n	8002fbc <_strtol_l.constprop.0+0xc0>
 8002f88:	fb06 4603 	mla	r6, r6, r3, r4
 8002f8c:	f04f 0e01 	mov.w	lr, #1
 8002f90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f94:	e7e8      	b.n	8002f68 <_strtol_l.constprop.0+0x6c>
 8002f96:	2c2b      	cmp	r4, #43	; 0x2b
 8002f98:	bf04      	itt	eq
 8002f9a:	782c      	ldrbeq	r4, [r5, #0]
 8002f9c:	1cb5      	addeq	r5, r6, #2
 8002f9e:	e7ca      	b.n	8002f36 <_strtol_l.constprop.0+0x3a>
 8002fa0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002fa4:	f1bc 0f19 	cmp.w	ip, #25
 8002fa8:	d801      	bhi.n	8002fae <_strtol_l.constprop.0+0xb2>
 8002faa:	3c37      	subs	r4, #55	; 0x37
 8002fac:	e7e2      	b.n	8002f74 <_strtol_l.constprop.0+0x78>
 8002fae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002fb2:	f1bc 0f19 	cmp.w	ip, #25
 8002fb6:	d804      	bhi.n	8002fc2 <_strtol_l.constprop.0+0xc6>
 8002fb8:	3c57      	subs	r4, #87	; 0x57
 8002fba:	e7db      	b.n	8002f74 <_strtol_l.constprop.0+0x78>
 8002fbc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8002fc0:	e7e6      	b.n	8002f90 <_strtol_l.constprop.0+0x94>
 8002fc2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8002fc6:	d105      	bne.n	8002fd4 <_strtol_l.constprop.0+0xd8>
 8002fc8:	2322      	movs	r3, #34	; 0x22
 8002fca:	6003      	str	r3, [r0, #0]
 8002fcc:	4646      	mov	r6, r8
 8002fce:	b942      	cbnz	r2, 8002fe2 <_strtol_l.constprop.0+0xe6>
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	e79e      	b.n	8002f12 <_strtol_l.constprop.0+0x16>
 8002fd4:	b107      	cbz	r7, 8002fd8 <_strtol_l.constprop.0+0xdc>
 8002fd6:	4276      	negs	r6, r6
 8002fd8:	2a00      	cmp	r2, #0
 8002fda:	d0f9      	beq.n	8002fd0 <_strtol_l.constprop.0+0xd4>
 8002fdc:	f1be 0f00 	cmp.w	lr, #0
 8002fe0:	d000      	beq.n	8002fe4 <_strtol_l.constprop.0+0xe8>
 8002fe2:	1e69      	subs	r1, r5, #1
 8002fe4:	6011      	str	r1, [r2, #0]
 8002fe6:	e7f3      	b.n	8002fd0 <_strtol_l.constprop.0+0xd4>
 8002fe8:	2430      	movs	r4, #48	; 0x30
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1b1      	bne.n	8002f52 <_strtol_l.constprop.0+0x56>
 8002fee:	2308      	movs	r3, #8
 8002ff0:	e7af      	b.n	8002f52 <_strtol_l.constprop.0+0x56>
 8002ff2:	2c30      	cmp	r4, #48	; 0x30
 8002ff4:	d0a5      	beq.n	8002f42 <_strtol_l.constprop.0+0x46>
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	e7ab      	b.n	8002f52 <_strtol_l.constprop.0+0x56>
 8002ffa:	bf00      	nop
 8002ffc:	080044aa 	.word	0x080044aa

08003000 <strtol>:
 8003000:	4613      	mov	r3, r2
 8003002:	460a      	mov	r2, r1
 8003004:	4601      	mov	r1, r0
 8003006:	4802      	ldr	r0, [pc, #8]	; (8003010 <strtol+0x10>)
 8003008:	6800      	ldr	r0, [r0, #0]
 800300a:	f7ff bf77 	b.w	8002efc <_strtol_l.constprop.0>
 800300e:	bf00      	nop
 8003010:	20000064 	.word	0x20000064

08003014 <_fwalk_sglue>:
 8003014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003018:	4607      	mov	r7, r0
 800301a:	4688      	mov	r8, r1
 800301c:	4614      	mov	r4, r2
 800301e:	2600      	movs	r6, #0
 8003020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003024:	f1b9 0901 	subs.w	r9, r9, #1
 8003028:	d505      	bpl.n	8003036 <_fwalk_sglue+0x22>
 800302a:	6824      	ldr	r4, [r4, #0]
 800302c:	2c00      	cmp	r4, #0
 800302e:	d1f7      	bne.n	8003020 <_fwalk_sglue+0xc>
 8003030:	4630      	mov	r0, r6
 8003032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003036:	89ab      	ldrh	r3, [r5, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d907      	bls.n	800304c <_fwalk_sglue+0x38>
 800303c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003040:	3301      	adds	r3, #1
 8003042:	d003      	beq.n	800304c <_fwalk_sglue+0x38>
 8003044:	4629      	mov	r1, r5
 8003046:	4638      	mov	r0, r7
 8003048:	47c0      	blx	r8
 800304a:	4306      	orrs	r6, r0
 800304c:	3568      	adds	r5, #104	; 0x68
 800304e:	e7e9      	b.n	8003024 <_fwalk_sglue+0x10>

08003050 <iprintf>:
 8003050:	b40f      	push	{r0, r1, r2, r3}
 8003052:	b507      	push	{r0, r1, r2, lr}
 8003054:	4906      	ldr	r1, [pc, #24]	; (8003070 <iprintf+0x20>)
 8003056:	ab04      	add	r3, sp, #16
 8003058:	6808      	ldr	r0, [r1, #0]
 800305a:	f853 2b04 	ldr.w	r2, [r3], #4
 800305e:	6881      	ldr	r1, [r0, #8]
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	f000 faa9 	bl	80035b8 <_vfiprintf_r>
 8003066:	b003      	add	sp, #12
 8003068:	f85d eb04 	ldr.w	lr, [sp], #4
 800306c:	b004      	add	sp, #16
 800306e:	4770      	bx	lr
 8003070:	20000064 	.word	0x20000064

08003074 <_puts_r>:
 8003074:	6a03      	ldr	r3, [r0, #32]
 8003076:	b570      	push	{r4, r5, r6, lr}
 8003078:	6884      	ldr	r4, [r0, #8]
 800307a:	4605      	mov	r5, r0
 800307c:	460e      	mov	r6, r1
 800307e:	b90b      	cbnz	r3, 8003084 <_puts_r+0x10>
 8003080:	f7ff ff24 	bl	8002ecc <__sinit>
 8003084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003086:	07db      	lsls	r3, r3, #31
 8003088:	d405      	bmi.n	8003096 <_puts_r+0x22>
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	0598      	lsls	r0, r3, #22
 800308e:	d402      	bmi.n	8003096 <_puts_r+0x22>
 8003090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003092:	f000 f8ee 	bl	8003272 <__retarget_lock_acquire_recursive>
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	0719      	lsls	r1, r3, #28
 800309a:	d513      	bpl.n	80030c4 <_puts_r+0x50>
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	b18b      	cbz	r3, 80030c4 <_puts_r+0x50>
 80030a0:	3e01      	subs	r6, #1
 80030a2:	68a3      	ldr	r3, [r4, #8]
 80030a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60a3      	str	r3, [r4, #8]
 80030ac:	b9e9      	cbnz	r1, 80030ea <_puts_r+0x76>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da2e      	bge.n	8003110 <_puts_r+0x9c>
 80030b2:	4622      	mov	r2, r4
 80030b4:	210a      	movs	r1, #10
 80030b6:	4628      	mov	r0, r5
 80030b8:	f000 ff0f 	bl	8003eda <__swbuf_r>
 80030bc:	3001      	adds	r0, #1
 80030be:	d007      	beq.n	80030d0 <_puts_r+0x5c>
 80030c0:	250a      	movs	r5, #10
 80030c2:	e007      	b.n	80030d4 <_puts_r+0x60>
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 ff44 	bl	8003f54 <__swsetup_r>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d0e7      	beq.n	80030a0 <_puts_r+0x2c>
 80030d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80030d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030d6:	07da      	lsls	r2, r3, #31
 80030d8:	d405      	bmi.n	80030e6 <_puts_r+0x72>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	059b      	lsls	r3, r3, #22
 80030de:	d402      	bmi.n	80030e6 <_puts_r+0x72>
 80030e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030e2:	f000 f8c7 	bl	8003274 <__retarget_lock_release_recursive>
 80030e6:	4628      	mov	r0, r5
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da04      	bge.n	80030f8 <_puts_r+0x84>
 80030ee:	69a2      	ldr	r2, [r4, #24]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	dc06      	bgt.n	8003102 <_puts_r+0x8e>
 80030f4:	290a      	cmp	r1, #10
 80030f6:	d004      	beq.n	8003102 <_puts_r+0x8e>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	6022      	str	r2, [r4, #0]
 80030fe:	7019      	strb	r1, [r3, #0]
 8003100:	e7cf      	b.n	80030a2 <_puts_r+0x2e>
 8003102:	4622      	mov	r2, r4
 8003104:	4628      	mov	r0, r5
 8003106:	f000 fee8 	bl	8003eda <__swbuf_r>
 800310a:	3001      	adds	r0, #1
 800310c:	d1c9      	bne.n	80030a2 <_puts_r+0x2e>
 800310e:	e7df      	b.n	80030d0 <_puts_r+0x5c>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	250a      	movs	r5, #10
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	6022      	str	r2, [r4, #0]
 8003118:	701d      	strb	r5, [r3, #0]
 800311a:	e7db      	b.n	80030d4 <_puts_r+0x60>

0800311c <puts>:
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <puts+0xc>)
 800311e:	4601      	mov	r1, r0
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	f7ff bfa7 	b.w	8003074 <_puts_r>
 8003126:	bf00      	nop
 8003128:	20000064 	.word	0x20000064

0800312c <strncpy>:
 800312c:	b510      	push	{r4, lr}
 800312e:	3901      	subs	r1, #1
 8003130:	4603      	mov	r3, r0
 8003132:	b132      	cbz	r2, 8003142 <strncpy+0x16>
 8003134:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003138:	f803 4b01 	strb.w	r4, [r3], #1
 800313c:	3a01      	subs	r2, #1
 800313e:	2c00      	cmp	r4, #0
 8003140:	d1f7      	bne.n	8003132 <strncpy+0x6>
 8003142:	441a      	add	r2, r3
 8003144:	2100      	movs	r1, #0
 8003146:	4293      	cmp	r3, r2
 8003148:	d100      	bne.n	800314c <strncpy+0x20>
 800314a:	bd10      	pop	{r4, pc}
 800314c:	f803 1b01 	strb.w	r1, [r3], #1
 8003150:	e7f9      	b.n	8003146 <strncpy+0x1a>
	...

08003154 <strtok>:
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <strtok+0x5c>)
 8003156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003158:	681e      	ldr	r6, [r3, #0]
 800315a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800315c:	4605      	mov	r5, r0
 800315e:	b9fc      	cbnz	r4, 80031a0 <strtok+0x4c>
 8003160:	2050      	movs	r0, #80	; 0x50
 8003162:	9101      	str	r1, [sp, #4]
 8003164:	f000 fb42 	bl	80037ec <malloc>
 8003168:	9901      	ldr	r1, [sp, #4]
 800316a:	6470      	str	r0, [r6, #68]	; 0x44
 800316c:	4602      	mov	r2, r0
 800316e:	b920      	cbnz	r0, 800317a <strtok+0x26>
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <strtok+0x60>)
 8003172:	4811      	ldr	r0, [pc, #68]	; (80031b8 <strtok+0x64>)
 8003174:	215b      	movs	r1, #91	; 0x5b
 8003176:	f000 f87f 	bl	8003278 <__assert_func>
 800317a:	e9c0 4400 	strd	r4, r4, [r0]
 800317e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003182:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003186:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800318a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800318e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003192:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003196:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800319a:	6184      	str	r4, [r0, #24]
 800319c:	7704      	strb	r4, [r0, #28]
 800319e:	6244      	str	r4, [r0, #36]	; 0x24
 80031a0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80031a2:	2301      	movs	r3, #1
 80031a4:	4628      	mov	r0, r5
 80031a6:	b002      	add	sp, #8
 80031a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031ac:	f000 b806 	b.w	80031bc <__strtok_r>
 80031b0:	20000064 	.word	0x20000064
 80031b4:	08004438 	.word	0x08004438
 80031b8:	0800444f 	.word	0x0800444f

080031bc <__strtok_r>:
 80031bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031be:	b908      	cbnz	r0, 80031c4 <__strtok_r+0x8>
 80031c0:	6810      	ldr	r0, [r2, #0]
 80031c2:	b188      	cbz	r0, 80031e8 <__strtok_r+0x2c>
 80031c4:	4604      	mov	r4, r0
 80031c6:	4620      	mov	r0, r4
 80031c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80031cc:	460f      	mov	r7, r1
 80031ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80031d2:	b91e      	cbnz	r6, 80031dc <__strtok_r+0x20>
 80031d4:	b965      	cbnz	r5, 80031f0 <__strtok_r+0x34>
 80031d6:	6015      	str	r5, [r2, #0]
 80031d8:	4628      	mov	r0, r5
 80031da:	e005      	b.n	80031e8 <__strtok_r+0x2c>
 80031dc:	42b5      	cmp	r5, r6
 80031de:	d1f6      	bne.n	80031ce <__strtok_r+0x12>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <__strtok_r+0xa>
 80031e4:	6014      	str	r4, [r2, #0]
 80031e6:	7003      	strb	r3, [r0, #0]
 80031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ea:	461c      	mov	r4, r3
 80031ec:	e00c      	b.n	8003208 <__strtok_r+0x4c>
 80031ee:	b915      	cbnz	r5, 80031f6 <__strtok_r+0x3a>
 80031f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80031f4:	460e      	mov	r6, r1
 80031f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80031fa:	42ab      	cmp	r3, r5
 80031fc:	d1f7      	bne.n	80031ee <__strtok_r+0x32>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f3      	beq.n	80031ea <__strtok_r+0x2e>
 8003202:	2300      	movs	r3, #0
 8003204:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003208:	6014      	str	r4, [r2, #0]
 800320a:	e7ed      	b.n	80031e8 <__strtok_r+0x2c>

0800320c <memset>:
 800320c:	4402      	add	r2, r0
 800320e:	4603      	mov	r3, r0
 8003210:	4293      	cmp	r3, r2
 8003212:	d100      	bne.n	8003216 <memset+0xa>
 8003214:	4770      	bx	lr
 8003216:	f803 1b01 	strb.w	r1, [r3], #1
 800321a:	e7f9      	b.n	8003210 <memset+0x4>

0800321c <__errno>:
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <__errno+0x8>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000064 	.word	0x20000064

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4d0d      	ldr	r5, [pc, #52]	; (8003260 <__libc_init_array+0x38>)
 800322c:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 800322e:	1b64      	subs	r4, r4, r5
 8003230:	10a4      	asrs	r4, r4, #2
 8003232:	2600      	movs	r6, #0
 8003234:	42a6      	cmp	r6, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	4d0b      	ldr	r5, [pc, #44]	; (8003268 <__libc_init_array+0x40>)
 800323a:	4c0c      	ldr	r4, [pc, #48]	; (800326c <__libc_init_array+0x44>)
 800323c:	f001 f884 	bl	8004348 <_init>
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	2600      	movs	r6, #0
 8003246:	42a6      	cmp	r6, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003250:	4798      	blx	r3
 8003252:	3601      	adds	r6, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	f855 3b04 	ldr.w	r3, [r5], #4
 800325a:	4798      	blx	r3
 800325c:	3601      	adds	r6, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	08004624 	.word	0x08004624
 8003264:	08004624 	.word	0x08004624
 8003268:	08004624 	.word	0x08004624
 800326c:	08004628 	.word	0x08004628

08003270 <__retarget_lock_init_recursive>:
 8003270:	4770      	bx	lr

08003272 <__retarget_lock_acquire_recursive>:
 8003272:	4770      	bx	lr

08003274 <__retarget_lock_release_recursive>:
 8003274:	4770      	bx	lr
	...

08003278 <__assert_func>:
 8003278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800327a:	4614      	mov	r4, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <__assert_func+0x2c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4605      	mov	r5, r0
 8003284:	68d8      	ldr	r0, [r3, #12]
 8003286:	b14c      	cbz	r4, 800329c <__assert_func+0x24>
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <__assert_func+0x30>)
 800328a:	9100      	str	r1, [sp, #0]
 800328c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003290:	4906      	ldr	r1, [pc, #24]	; (80032ac <__assert_func+0x34>)
 8003292:	462b      	mov	r3, r5
 8003294:	f000 fde0 	bl	8003e58 <fiprintf>
 8003298:	f000 ffb6 	bl	8004208 <abort>
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <__assert_func+0x38>)
 800329e:	461c      	mov	r4, r3
 80032a0:	e7f3      	b.n	800328a <__assert_func+0x12>
 80032a2:	bf00      	nop
 80032a4:	20000064 	.word	0x20000064
 80032a8:	080045aa 	.word	0x080045aa
 80032ac:	080045b7 	.word	0x080045b7
 80032b0:	080045e5 	.word	0x080045e5

080032b4 <__ssputs_r>:
 80032b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b8:	688e      	ldr	r6, [r1, #8]
 80032ba:	461f      	mov	r7, r3
 80032bc:	42be      	cmp	r6, r7
 80032be:	680b      	ldr	r3, [r1, #0]
 80032c0:	4682      	mov	sl, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	4690      	mov	r8, r2
 80032c6:	d82c      	bhi.n	8003322 <__ssputs_r+0x6e>
 80032c8:	898a      	ldrh	r2, [r1, #12]
 80032ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032ce:	d026      	beq.n	800331e <__ssputs_r+0x6a>
 80032d0:	6965      	ldr	r5, [r4, #20]
 80032d2:	6909      	ldr	r1, [r1, #16]
 80032d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d8:	eba3 0901 	sub.w	r9, r3, r1
 80032dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032e0:	1c7b      	adds	r3, r7, #1
 80032e2:	444b      	add	r3, r9
 80032e4:	106d      	asrs	r5, r5, #1
 80032e6:	429d      	cmp	r5, r3
 80032e8:	bf38      	it	cc
 80032ea:	461d      	movcc	r5, r3
 80032ec:	0553      	lsls	r3, r2, #21
 80032ee:	d527      	bpl.n	8003340 <__ssputs_r+0x8c>
 80032f0:	4629      	mov	r1, r5
 80032f2:	f000 faa3 	bl	800383c <_malloc_r>
 80032f6:	4606      	mov	r6, r0
 80032f8:	b360      	cbz	r0, 8003354 <__ssputs_r+0xa0>
 80032fa:	6921      	ldr	r1, [r4, #16]
 80032fc:	464a      	mov	r2, r9
 80032fe:	f000 ff75 	bl	80041ec <memcpy>
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	6126      	str	r6, [r4, #16]
 8003310:	6165      	str	r5, [r4, #20]
 8003312:	444e      	add	r6, r9
 8003314:	eba5 0509 	sub.w	r5, r5, r9
 8003318:	6026      	str	r6, [r4, #0]
 800331a:	60a5      	str	r5, [r4, #8]
 800331c:	463e      	mov	r6, r7
 800331e:	42be      	cmp	r6, r7
 8003320:	d900      	bls.n	8003324 <__ssputs_r+0x70>
 8003322:	463e      	mov	r6, r7
 8003324:	6820      	ldr	r0, [r4, #0]
 8003326:	4632      	mov	r2, r6
 8003328:	4641      	mov	r1, r8
 800332a:	f000 fecd 	bl	80040c8 <memmove>
 800332e:	68a3      	ldr	r3, [r4, #8]
 8003330:	1b9b      	subs	r3, r3, r6
 8003332:	60a3      	str	r3, [r4, #8]
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	4433      	add	r3, r6
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	2000      	movs	r0, #0
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	462a      	mov	r2, r5
 8003342:	f000 fd9b 	bl	8003e7c <_realloc_r>
 8003346:	4606      	mov	r6, r0
 8003348:	2800      	cmp	r0, #0
 800334a:	d1e0      	bne.n	800330e <__ssputs_r+0x5a>
 800334c:	6921      	ldr	r1, [r4, #16]
 800334e:	4650      	mov	r0, sl
 8003350:	f000 ff62 	bl	8004218 <_free_r>
 8003354:	230c      	movs	r3, #12
 8003356:	f8ca 3000 	str.w	r3, [sl]
 800335a:	89a3      	ldrh	r3, [r4, #12]
 800335c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003360:	81a3      	strh	r3, [r4, #12]
 8003362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003366:	e7e9      	b.n	800333c <__ssputs_r+0x88>

08003368 <_svfiprintf_r>:
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	4698      	mov	r8, r3
 800336e:	898b      	ldrh	r3, [r1, #12]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	b09d      	sub	sp, #116	; 0x74
 8003374:	4607      	mov	r7, r0
 8003376:	460d      	mov	r5, r1
 8003378:	4614      	mov	r4, r2
 800337a:	d50e      	bpl.n	800339a <_svfiprintf_r+0x32>
 800337c:	690b      	ldr	r3, [r1, #16]
 800337e:	b963      	cbnz	r3, 800339a <_svfiprintf_r+0x32>
 8003380:	2140      	movs	r1, #64	; 0x40
 8003382:	f000 fa5b 	bl	800383c <_malloc_r>
 8003386:	6028      	str	r0, [r5, #0]
 8003388:	6128      	str	r0, [r5, #16]
 800338a:	b920      	cbnz	r0, 8003396 <_svfiprintf_r+0x2e>
 800338c:	230c      	movs	r3, #12
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003394:	e0d0      	b.n	8003538 <_svfiprintf_r+0x1d0>
 8003396:	2340      	movs	r3, #64	; 0x40
 8003398:	616b      	str	r3, [r5, #20]
 800339a:	2300      	movs	r3, #0
 800339c:	9309      	str	r3, [sp, #36]	; 0x24
 800339e:	2320      	movs	r3, #32
 80033a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a8:	2330      	movs	r3, #48	; 0x30
 80033aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003550 <_svfiprintf_r+0x1e8>
 80033ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033b2:	f04f 0901 	mov.w	r9, #1
 80033b6:	4623      	mov	r3, r4
 80033b8:	469a      	mov	sl, r3
 80033ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033be:	b10a      	cbz	r2, 80033c4 <_svfiprintf_r+0x5c>
 80033c0:	2a25      	cmp	r2, #37	; 0x25
 80033c2:	d1f9      	bne.n	80033b8 <_svfiprintf_r+0x50>
 80033c4:	ebba 0b04 	subs.w	fp, sl, r4
 80033c8:	d00b      	beq.n	80033e2 <_svfiprintf_r+0x7a>
 80033ca:	465b      	mov	r3, fp
 80033cc:	4622      	mov	r2, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	4638      	mov	r0, r7
 80033d2:	f7ff ff6f 	bl	80032b4 <__ssputs_r>
 80033d6:	3001      	adds	r0, #1
 80033d8:	f000 80a9 	beq.w	800352e <_svfiprintf_r+0x1c6>
 80033dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033de:	445a      	add	r2, fp
 80033e0:	9209      	str	r2, [sp, #36]	; 0x24
 80033e2:	f89a 3000 	ldrb.w	r3, [sl]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a1 	beq.w	800352e <_svfiprintf_r+0x1c6>
 80033ec:	2300      	movs	r3, #0
 80033ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f6:	f10a 0a01 	add.w	sl, sl, #1
 80033fa:	9304      	str	r3, [sp, #16]
 80033fc:	9307      	str	r3, [sp, #28]
 80033fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003402:	931a      	str	r3, [sp, #104]	; 0x68
 8003404:	4654      	mov	r4, sl
 8003406:	2205      	movs	r2, #5
 8003408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340c:	4850      	ldr	r0, [pc, #320]	; (8003550 <_svfiprintf_r+0x1e8>)
 800340e:	f7fc feef 	bl	80001f0 <memchr>
 8003412:	9a04      	ldr	r2, [sp, #16]
 8003414:	b9d8      	cbnz	r0, 800344e <_svfiprintf_r+0xe6>
 8003416:	06d0      	lsls	r0, r2, #27
 8003418:	bf44      	itt	mi
 800341a:	2320      	movmi	r3, #32
 800341c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003420:	0711      	lsls	r1, r2, #28
 8003422:	bf44      	itt	mi
 8003424:	232b      	movmi	r3, #43	; 0x2b
 8003426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800342a:	f89a 3000 	ldrb.w	r3, [sl]
 800342e:	2b2a      	cmp	r3, #42	; 0x2a
 8003430:	d015      	beq.n	800345e <_svfiprintf_r+0xf6>
 8003432:	9a07      	ldr	r2, [sp, #28]
 8003434:	4654      	mov	r4, sl
 8003436:	2000      	movs	r0, #0
 8003438:	f04f 0c0a 	mov.w	ip, #10
 800343c:	4621      	mov	r1, r4
 800343e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003442:	3b30      	subs	r3, #48	; 0x30
 8003444:	2b09      	cmp	r3, #9
 8003446:	d94d      	bls.n	80034e4 <_svfiprintf_r+0x17c>
 8003448:	b1b0      	cbz	r0, 8003478 <_svfiprintf_r+0x110>
 800344a:	9207      	str	r2, [sp, #28]
 800344c:	e014      	b.n	8003478 <_svfiprintf_r+0x110>
 800344e:	eba0 0308 	sub.w	r3, r0, r8
 8003452:	fa09 f303 	lsl.w	r3, r9, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	9304      	str	r3, [sp, #16]
 800345a:	46a2      	mov	sl, r4
 800345c:	e7d2      	b.n	8003404 <_svfiprintf_r+0x9c>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	1d19      	adds	r1, r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	9103      	str	r1, [sp, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfbb      	ittet	lt
 800346a:	425b      	neglt	r3, r3
 800346c:	f042 0202 	orrlt.w	r2, r2, #2
 8003470:	9307      	strge	r3, [sp, #28]
 8003472:	9307      	strlt	r3, [sp, #28]
 8003474:	bfb8      	it	lt
 8003476:	9204      	strlt	r2, [sp, #16]
 8003478:	7823      	ldrb	r3, [r4, #0]
 800347a:	2b2e      	cmp	r3, #46	; 0x2e
 800347c:	d10c      	bne.n	8003498 <_svfiprintf_r+0x130>
 800347e:	7863      	ldrb	r3, [r4, #1]
 8003480:	2b2a      	cmp	r3, #42	; 0x2a
 8003482:	d134      	bne.n	80034ee <_svfiprintf_r+0x186>
 8003484:	9b03      	ldr	r3, [sp, #12]
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	9203      	str	r2, [sp, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	bfb8      	it	lt
 8003490:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003494:	3402      	adds	r4, #2
 8003496:	9305      	str	r3, [sp, #20]
 8003498:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003560 <_svfiprintf_r+0x1f8>
 800349c:	7821      	ldrb	r1, [r4, #0]
 800349e:	2203      	movs	r2, #3
 80034a0:	4650      	mov	r0, sl
 80034a2:	f7fc fea5 	bl	80001f0 <memchr>
 80034a6:	b138      	cbz	r0, 80034b8 <_svfiprintf_r+0x150>
 80034a8:	9b04      	ldr	r3, [sp, #16]
 80034aa:	eba0 000a 	sub.w	r0, r0, sl
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	4082      	lsls	r2, r0
 80034b2:	4313      	orrs	r3, r2
 80034b4:	3401      	adds	r4, #1
 80034b6:	9304      	str	r3, [sp, #16]
 80034b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034bc:	4825      	ldr	r0, [pc, #148]	; (8003554 <_svfiprintf_r+0x1ec>)
 80034be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c2:	2206      	movs	r2, #6
 80034c4:	f7fc fe94 	bl	80001f0 <memchr>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d038      	beq.n	800353e <_svfiprintf_r+0x1d6>
 80034cc:	4b22      	ldr	r3, [pc, #136]	; (8003558 <_svfiprintf_r+0x1f0>)
 80034ce:	bb1b      	cbnz	r3, 8003518 <_svfiprintf_r+0x1b0>
 80034d0:	9b03      	ldr	r3, [sp, #12]
 80034d2:	3307      	adds	r3, #7
 80034d4:	f023 0307 	bic.w	r3, r3, #7
 80034d8:	3308      	adds	r3, #8
 80034da:	9303      	str	r3, [sp, #12]
 80034dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034de:	4433      	add	r3, r6
 80034e0:	9309      	str	r3, [sp, #36]	; 0x24
 80034e2:	e768      	b.n	80033b6 <_svfiprintf_r+0x4e>
 80034e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e8:	460c      	mov	r4, r1
 80034ea:	2001      	movs	r0, #1
 80034ec:	e7a6      	b.n	800343c <_svfiprintf_r+0xd4>
 80034ee:	2300      	movs	r3, #0
 80034f0:	3401      	adds	r4, #1
 80034f2:	9305      	str	r3, [sp, #20]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f04f 0c0a 	mov.w	ip, #10
 80034fa:	4620      	mov	r0, r4
 80034fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003500:	3a30      	subs	r2, #48	; 0x30
 8003502:	2a09      	cmp	r2, #9
 8003504:	d903      	bls.n	800350e <_svfiprintf_r+0x1a6>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0c6      	beq.n	8003498 <_svfiprintf_r+0x130>
 800350a:	9105      	str	r1, [sp, #20]
 800350c:	e7c4      	b.n	8003498 <_svfiprintf_r+0x130>
 800350e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003512:	4604      	mov	r4, r0
 8003514:	2301      	movs	r3, #1
 8003516:	e7f0      	b.n	80034fa <_svfiprintf_r+0x192>
 8003518:	ab03      	add	r3, sp, #12
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	462a      	mov	r2, r5
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <_svfiprintf_r+0x1f4>)
 8003520:	a904      	add	r1, sp, #16
 8003522:	4638      	mov	r0, r7
 8003524:	f3af 8000 	nop.w
 8003528:	1c42      	adds	r2, r0, #1
 800352a:	4606      	mov	r6, r0
 800352c:	d1d6      	bne.n	80034dc <_svfiprintf_r+0x174>
 800352e:	89ab      	ldrh	r3, [r5, #12]
 8003530:	065b      	lsls	r3, r3, #25
 8003532:	f53f af2d 	bmi.w	8003390 <_svfiprintf_r+0x28>
 8003536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003538:	b01d      	add	sp, #116	; 0x74
 800353a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353e:	ab03      	add	r3, sp, #12
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	462a      	mov	r2, r5
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <_svfiprintf_r+0x1f4>)
 8003546:	a904      	add	r1, sp, #16
 8003548:	4638      	mov	r0, r7
 800354a:	f000 fa65 	bl	8003a18 <_printf_i>
 800354e:	e7eb      	b.n	8003528 <_svfiprintf_r+0x1c0>
 8003550:	080045e6 	.word	0x080045e6
 8003554:	080045f0 	.word	0x080045f0
 8003558:	00000000 	.word	0x00000000
 800355c:	080032b5 	.word	0x080032b5
 8003560:	080045ec 	.word	0x080045ec

08003564 <__sfputc_r>:
 8003564:	6893      	ldr	r3, [r2, #8]
 8003566:	3b01      	subs	r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	b410      	push	{r4}
 800356c:	6093      	str	r3, [r2, #8]
 800356e:	da08      	bge.n	8003582 <__sfputc_r+0x1e>
 8003570:	6994      	ldr	r4, [r2, #24]
 8003572:	42a3      	cmp	r3, r4
 8003574:	db01      	blt.n	800357a <__sfputc_r+0x16>
 8003576:	290a      	cmp	r1, #10
 8003578:	d103      	bne.n	8003582 <__sfputc_r+0x1e>
 800357a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800357e:	f000 bcac 	b.w	8003eda <__swbuf_r>
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	1c58      	adds	r0, r3, #1
 8003586:	6010      	str	r0, [r2, #0]
 8003588:	7019      	strb	r1, [r3, #0]
 800358a:	4608      	mov	r0, r1
 800358c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003590:	4770      	bx	lr

08003592 <__sfputs_r>:
 8003592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003594:	4606      	mov	r6, r0
 8003596:	460f      	mov	r7, r1
 8003598:	4614      	mov	r4, r2
 800359a:	18d5      	adds	r5, r2, r3
 800359c:	42ac      	cmp	r4, r5
 800359e:	d101      	bne.n	80035a4 <__sfputs_r+0x12>
 80035a0:	2000      	movs	r0, #0
 80035a2:	e007      	b.n	80035b4 <__sfputs_r+0x22>
 80035a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a8:	463a      	mov	r2, r7
 80035aa:	4630      	mov	r0, r6
 80035ac:	f7ff ffda 	bl	8003564 <__sfputc_r>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d1f3      	bne.n	800359c <__sfputs_r+0xa>
 80035b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035b8 <_vfiprintf_r>:
 80035b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035bc:	460d      	mov	r5, r1
 80035be:	b09d      	sub	sp, #116	; 0x74
 80035c0:	4614      	mov	r4, r2
 80035c2:	4698      	mov	r8, r3
 80035c4:	4606      	mov	r6, r0
 80035c6:	b118      	cbz	r0, 80035d0 <_vfiprintf_r+0x18>
 80035c8:	6a03      	ldr	r3, [r0, #32]
 80035ca:	b90b      	cbnz	r3, 80035d0 <_vfiprintf_r+0x18>
 80035cc:	f7ff fc7e 	bl	8002ecc <__sinit>
 80035d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035d2:	07d9      	lsls	r1, r3, #31
 80035d4:	d405      	bmi.n	80035e2 <_vfiprintf_r+0x2a>
 80035d6:	89ab      	ldrh	r3, [r5, #12]
 80035d8:	059a      	lsls	r2, r3, #22
 80035da:	d402      	bmi.n	80035e2 <_vfiprintf_r+0x2a>
 80035dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035de:	f7ff fe48 	bl	8003272 <__retarget_lock_acquire_recursive>
 80035e2:	89ab      	ldrh	r3, [r5, #12]
 80035e4:	071b      	lsls	r3, r3, #28
 80035e6:	d501      	bpl.n	80035ec <_vfiprintf_r+0x34>
 80035e8:	692b      	ldr	r3, [r5, #16]
 80035ea:	b99b      	cbnz	r3, 8003614 <_vfiprintf_r+0x5c>
 80035ec:	4629      	mov	r1, r5
 80035ee:	4630      	mov	r0, r6
 80035f0:	f000 fcb0 	bl	8003f54 <__swsetup_r>
 80035f4:	b170      	cbz	r0, 8003614 <_vfiprintf_r+0x5c>
 80035f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035f8:	07dc      	lsls	r4, r3, #31
 80035fa:	d504      	bpl.n	8003606 <_vfiprintf_r+0x4e>
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003600:	b01d      	add	sp, #116	; 0x74
 8003602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003606:	89ab      	ldrh	r3, [r5, #12]
 8003608:	0598      	lsls	r0, r3, #22
 800360a:	d4f7      	bmi.n	80035fc <_vfiprintf_r+0x44>
 800360c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800360e:	f7ff fe31 	bl	8003274 <__retarget_lock_release_recursive>
 8003612:	e7f3      	b.n	80035fc <_vfiprintf_r+0x44>
 8003614:	2300      	movs	r3, #0
 8003616:	9309      	str	r3, [sp, #36]	; 0x24
 8003618:	2320      	movs	r3, #32
 800361a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800361e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003622:	2330      	movs	r3, #48	; 0x30
 8003624:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80037d8 <_vfiprintf_r+0x220>
 8003628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800362c:	f04f 0901 	mov.w	r9, #1
 8003630:	4623      	mov	r3, r4
 8003632:	469a      	mov	sl, r3
 8003634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003638:	b10a      	cbz	r2, 800363e <_vfiprintf_r+0x86>
 800363a:	2a25      	cmp	r2, #37	; 0x25
 800363c:	d1f9      	bne.n	8003632 <_vfiprintf_r+0x7a>
 800363e:	ebba 0b04 	subs.w	fp, sl, r4
 8003642:	d00b      	beq.n	800365c <_vfiprintf_r+0xa4>
 8003644:	465b      	mov	r3, fp
 8003646:	4622      	mov	r2, r4
 8003648:	4629      	mov	r1, r5
 800364a:	4630      	mov	r0, r6
 800364c:	f7ff ffa1 	bl	8003592 <__sfputs_r>
 8003650:	3001      	adds	r0, #1
 8003652:	f000 80a9 	beq.w	80037a8 <_vfiprintf_r+0x1f0>
 8003656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003658:	445a      	add	r2, fp
 800365a:	9209      	str	r2, [sp, #36]	; 0x24
 800365c:	f89a 3000 	ldrb.w	r3, [sl]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a1 	beq.w	80037a8 <_vfiprintf_r+0x1f0>
 8003666:	2300      	movs	r3, #0
 8003668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800366c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003670:	f10a 0a01 	add.w	sl, sl, #1
 8003674:	9304      	str	r3, [sp, #16]
 8003676:	9307      	str	r3, [sp, #28]
 8003678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800367c:	931a      	str	r3, [sp, #104]	; 0x68
 800367e:	4654      	mov	r4, sl
 8003680:	2205      	movs	r2, #5
 8003682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003686:	4854      	ldr	r0, [pc, #336]	; (80037d8 <_vfiprintf_r+0x220>)
 8003688:	f7fc fdb2 	bl	80001f0 <memchr>
 800368c:	9a04      	ldr	r2, [sp, #16]
 800368e:	b9d8      	cbnz	r0, 80036c8 <_vfiprintf_r+0x110>
 8003690:	06d1      	lsls	r1, r2, #27
 8003692:	bf44      	itt	mi
 8003694:	2320      	movmi	r3, #32
 8003696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800369a:	0713      	lsls	r3, r2, #28
 800369c:	bf44      	itt	mi
 800369e:	232b      	movmi	r3, #43	; 0x2b
 80036a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036a4:	f89a 3000 	ldrb.w	r3, [sl]
 80036a8:	2b2a      	cmp	r3, #42	; 0x2a
 80036aa:	d015      	beq.n	80036d8 <_vfiprintf_r+0x120>
 80036ac:	9a07      	ldr	r2, [sp, #28]
 80036ae:	4654      	mov	r4, sl
 80036b0:	2000      	movs	r0, #0
 80036b2:	f04f 0c0a 	mov.w	ip, #10
 80036b6:	4621      	mov	r1, r4
 80036b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036bc:	3b30      	subs	r3, #48	; 0x30
 80036be:	2b09      	cmp	r3, #9
 80036c0:	d94d      	bls.n	800375e <_vfiprintf_r+0x1a6>
 80036c2:	b1b0      	cbz	r0, 80036f2 <_vfiprintf_r+0x13a>
 80036c4:	9207      	str	r2, [sp, #28]
 80036c6:	e014      	b.n	80036f2 <_vfiprintf_r+0x13a>
 80036c8:	eba0 0308 	sub.w	r3, r0, r8
 80036cc:	fa09 f303 	lsl.w	r3, r9, r3
 80036d0:	4313      	orrs	r3, r2
 80036d2:	9304      	str	r3, [sp, #16]
 80036d4:	46a2      	mov	sl, r4
 80036d6:	e7d2      	b.n	800367e <_vfiprintf_r+0xc6>
 80036d8:	9b03      	ldr	r3, [sp, #12]
 80036da:	1d19      	adds	r1, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	9103      	str	r1, [sp, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bfbb      	ittet	lt
 80036e4:	425b      	neglt	r3, r3
 80036e6:	f042 0202 	orrlt.w	r2, r2, #2
 80036ea:	9307      	strge	r3, [sp, #28]
 80036ec:	9307      	strlt	r3, [sp, #28]
 80036ee:	bfb8      	it	lt
 80036f0:	9204      	strlt	r2, [sp, #16]
 80036f2:	7823      	ldrb	r3, [r4, #0]
 80036f4:	2b2e      	cmp	r3, #46	; 0x2e
 80036f6:	d10c      	bne.n	8003712 <_vfiprintf_r+0x15a>
 80036f8:	7863      	ldrb	r3, [r4, #1]
 80036fa:	2b2a      	cmp	r3, #42	; 0x2a
 80036fc:	d134      	bne.n	8003768 <_vfiprintf_r+0x1b0>
 80036fe:	9b03      	ldr	r3, [sp, #12]
 8003700:	1d1a      	adds	r2, r3, #4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	9203      	str	r2, [sp, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	bfb8      	it	lt
 800370a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800370e:	3402      	adds	r4, #2
 8003710:	9305      	str	r3, [sp, #20]
 8003712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80037e8 <_vfiprintf_r+0x230>
 8003716:	7821      	ldrb	r1, [r4, #0]
 8003718:	2203      	movs	r2, #3
 800371a:	4650      	mov	r0, sl
 800371c:	f7fc fd68 	bl	80001f0 <memchr>
 8003720:	b138      	cbz	r0, 8003732 <_vfiprintf_r+0x17a>
 8003722:	9b04      	ldr	r3, [sp, #16]
 8003724:	eba0 000a 	sub.w	r0, r0, sl
 8003728:	2240      	movs	r2, #64	; 0x40
 800372a:	4082      	lsls	r2, r0
 800372c:	4313      	orrs	r3, r2
 800372e:	3401      	adds	r4, #1
 8003730:	9304      	str	r3, [sp, #16]
 8003732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003736:	4829      	ldr	r0, [pc, #164]	; (80037dc <_vfiprintf_r+0x224>)
 8003738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800373c:	2206      	movs	r2, #6
 800373e:	f7fc fd57 	bl	80001f0 <memchr>
 8003742:	2800      	cmp	r0, #0
 8003744:	d03f      	beq.n	80037c6 <_vfiprintf_r+0x20e>
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <_vfiprintf_r+0x228>)
 8003748:	bb1b      	cbnz	r3, 8003792 <_vfiprintf_r+0x1da>
 800374a:	9b03      	ldr	r3, [sp, #12]
 800374c:	3307      	adds	r3, #7
 800374e:	f023 0307 	bic.w	r3, r3, #7
 8003752:	3308      	adds	r3, #8
 8003754:	9303      	str	r3, [sp, #12]
 8003756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003758:	443b      	add	r3, r7
 800375a:	9309      	str	r3, [sp, #36]	; 0x24
 800375c:	e768      	b.n	8003630 <_vfiprintf_r+0x78>
 800375e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003762:	460c      	mov	r4, r1
 8003764:	2001      	movs	r0, #1
 8003766:	e7a6      	b.n	80036b6 <_vfiprintf_r+0xfe>
 8003768:	2300      	movs	r3, #0
 800376a:	3401      	adds	r4, #1
 800376c:	9305      	str	r3, [sp, #20]
 800376e:	4619      	mov	r1, r3
 8003770:	f04f 0c0a 	mov.w	ip, #10
 8003774:	4620      	mov	r0, r4
 8003776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800377a:	3a30      	subs	r2, #48	; 0x30
 800377c:	2a09      	cmp	r2, #9
 800377e:	d903      	bls.n	8003788 <_vfiprintf_r+0x1d0>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0c6      	beq.n	8003712 <_vfiprintf_r+0x15a>
 8003784:	9105      	str	r1, [sp, #20]
 8003786:	e7c4      	b.n	8003712 <_vfiprintf_r+0x15a>
 8003788:	fb0c 2101 	mla	r1, ip, r1, r2
 800378c:	4604      	mov	r4, r0
 800378e:	2301      	movs	r3, #1
 8003790:	e7f0      	b.n	8003774 <_vfiprintf_r+0x1bc>
 8003792:	ab03      	add	r3, sp, #12
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	462a      	mov	r2, r5
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <_vfiprintf_r+0x22c>)
 800379a:	a904      	add	r1, sp, #16
 800379c:	4630      	mov	r0, r6
 800379e:	f3af 8000 	nop.w
 80037a2:	4607      	mov	r7, r0
 80037a4:	1c78      	adds	r0, r7, #1
 80037a6:	d1d6      	bne.n	8003756 <_vfiprintf_r+0x19e>
 80037a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037aa:	07d9      	lsls	r1, r3, #31
 80037ac:	d405      	bmi.n	80037ba <_vfiprintf_r+0x202>
 80037ae:	89ab      	ldrh	r3, [r5, #12]
 80037b0:	059a      	lsls	r2, r3, #22
 80037b2:	d402      	bmi.n	80037ba <_vfiprintf_r+0x202>
 80037b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037b6:	f7ff fd5d 	bl	8003274 <__retarget_lock_release_recursive>
 80037ba:	89ab      	ldrh	r3, [r5, #12]
 80037bc:	065b      	lsls	r3, r3, #25
 80037be:	f53f af1d 	bmi.w	80035fc <_vfiprintf_r+0x44>
 80037c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037c4:	e71c      	b.n	8003600 <_vfiprintf_r+0x48>
 80037c6:	ab03      	add	r3, sp, #12
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	462a      	mov	r2, r5
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <_vfiprintf_r+0x22c>)
 80037ce:	a904      	add	r1, sp, #16
 80037d0:	4630      	mov	r0, r6
 80037d2:	f000 f921 	bl	8003a18 <_printf_i>
 80037d6:	e7e4      	b.n	80037a2 <_vfiprintf_r+0x1ea>
 80037d8:	080045e6 	.word	0x080045e6
 80037dc:	080045f0 	.word	0x080045f0
 80037e0:	00000000 	.word	0x00000000
 80037e4:	08003593 	.word	0x08003593
 80037e8:	080045ec 	.word	0x080045ec

080037ec <malloc>:
 80037ec:	4b02      	ldr	r3, [pc, #8]	; (80037f8 <malloc+0xc>)
 80037ee:	4601      	mov	r1, r0
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	f000 b823 	b.w	800383c <_malloc_r>
 80037f6:	bf00      	nop
 80037f8:	20000064 	.word	0x20000064

080037fc <sbrk_aligned>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4e0e      	ldr	r6, [pc, #56]	; (8003838 <sbrk_aligned+0x3c>)
 8003800:	460c      	mov	r4, r1
 8003802:	6831      	ldr	r1, [r6, #0]
 8003804:	4605      	mov	r5, r0
 8003806:	b911      	cbnz	r1, 800380e <sbrk_aligned+0x12>
 8003808:	f000 fcce 	bl	80041a8 <_sbrk_r>
 800380c:	6030      	str	r0, [r6, #0]
 800380e:	4621      	mov	r1, r4
 8003810:	4628      	mov	r0, r5
 8003812:	f000 fcc9 	bl	80041a8 <_sbrk_r>
 8003816:	1c43      	adds	r3, r0, #1
 8003818:	d00a      	beq.n	8003830 <sbrk_aligned+0x34>
 800381a:	1cc4      	adds	r4, r0, #3
 800381c:	f024 0403 	bic.w	r4, r4, #3
 8003820:	42a0      	cmp	r0, r4
 8003822:	d007      	beq.n	8003834 <sbrk_aligned+0x38>
 8003824:	1a21      	subs	r1, r4, r0
 8003826:	4628      	mov	r0, r5
 8003828:	f000 fcbe 	bl	80041a8 <_sbrk_r>
 800382c:	3001      	adds	r0, #1
 800382e:	d101      	bne.n	8003834 <sbrk_aligned+0x38>
 8003830:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003834:	4620      	mov	r0, r4
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	20000278 	.word	0x20000278

0800383c <_malloc_r>:
 800383c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003840:	1ccd      	adds	r5, r1, #3
 8003842:	f025 0503 	bic.w	r5, r5, #3
 8003846:	3508      	adds	r5, #8
 8003848:	2d0c      	cmp	r5, #12
 800384a:	bf38      	it	cc
 800384c:	250c      	movcc	r5, #12
 800384e:	2d00      	cmp	r5, #0
 8003850:	4607      	mov	r7, r0
 8003852:	db01      	blt.n	8003858 <_malloc_r+0x1c>
 8003854:	42a9      	cmp	r1, r5
 8003856:	d905      	bls.n	8003864 <_malloc_r+0x28>
 8003858:	230c      	movs	r3, #12
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	2600      	movs	r6, #0
 800385e:	4630      	mov	r0, r6
 8003860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003938 <_malloc_r+0xfc>
 8003868:	f000 faa6 	bl	8003db8 <__malloc_lock>
 800386c:	f8d8 3000 	ldr.w	r3, [r8]
 8003870:	461c      	mov	r4, r3
 8003872:	bb5c      	cbnz	r4, 80038cc <_malloc_r+0x90>
 8003874:	4629      	mov	r1, r5
 8003876:	4638      	mov	r0, r7
 8003878:	f7ff ffc0 	bl	80037fc <sbrk_aligned>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	4604      	mov	r4, r0
 8003880:	d155      	bne.n	800392e <_malloc_r+0xf2>
 8003882:	f8d8 4000 	ldr.w	r4, [r8]
 8003886:	4626      	mov	r6, r4
 8003888:	2e00      	cmp	r6, #0
 800388a:	d145      	bne.n	8003918 <_malloc_r+0xdc>
 800388c:	2c00      	cmp	r4, #0
 800388e:	d048      	beq.n	8003922 <_malloc_r+0xe6>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	4631      	mov	r1, r6
 8003894:	4638      	mov	r0, r7
 8003896:	eb04 0903 	add.w	r9, r4, r3
 800389a:	f000 fc85 	bl	80041a8 <_sbrk_r>
 800389e:	4581      	cmp	r9, r0
 80038a0:	d13f      	bne.n	8003922 <_malloc_r+0xe6>
 80038a2:	6821      	ldr	r1, [r4, #0]
 80038a4:	1a6d      	subs	r5, r5, r1
 80038a6:	4629      	mov	r1, r5
 80038a8:	4638      	mov	r0, r7
 80038aa:	f7ff ffa7 	bl	80037fc <sbrk_aligned>
 80038ae:	3001      	adds	r0, #1
 80038b0:	d037      	beq.n	8003922 <_malloc_r+0xe6>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	442b      	add	r3, r5
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	f8d8 3000 	ldr.w	r3, [r8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d038      	beq.n	8003932 <_malloc_r+0xf6>
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	42a2      	cmp	r2, r4
 80038c4:	d12b      	bne.n	800391e <_malloc_r+0xe2>
 80038c6:	2200      	movs	r2, #0
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	e00f      	b.n	80038ec <_malloc_r+0xb0>
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	1b52      	subs	r2, r2, r5
 80038d0:	d41f      	bmi.n	8003912 <_malloc_r+0xd6>
 80038d2:	2a0b      	cmp	r2, #11
 80038d4:	d917      	bls.n	8003906 <_malloc_r+0xca>
 80038d6:	1961      	adds	r1, r4, r5
 80038d8:	42a3      	cmp	r3, r4
 80038da:	6025      	str	r5, [r4, #0]
 80038dc:	bf18      	it	ne
 80038de:	6059      	strne	r1, [r3, #4]
 80038e0:	6863      	ldr	r3, [r4, #4]
 80038e2:	bf08      	it	eq
 80038e4:	f8c8 1000 	streq.w	r1, [r8]
 80038e8:	5162      	str	r2, [r4, r5]
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	4638      	mov	r0, r7
 80038ee:	f104 060b 	add.w	r6, r4, #11
 80038f2:	f000 fa67 	bl	8003dc4 <__malloc_unlock>
 80038f6:	f026 0607 	bic.w	r6, r6, #7
 80038fa:	1d23      	adds	r3, r4, #4
 80038fc:	1af2      	subs	r2, r6, r3
 80038fe:	d0ae      	beq.n	800385e <_malloc_r+0x22>
 8003900:	1b9b      	subs	r3, r3, r6
 8003902:	50a3      	str	r3, [r4, r2]
 8003904:	e7ab      	b.n	800385e <_malloc_r+0x22>
 8003906:	42a3      	cmp	r3, r4
 8003908:	6862      	ldr	r2, [r4, #4]
 800390a:	d1dd      	bne.n	80038c8 <_malloc_r+0x8c>
 800390c:	f8c8 2000 	str.w	r2, [r8]
 8003910:	e7ec      	b.n	80038ec <_malloc_r+0xb0>
 8003912:	4623      	mov	r3, r4
 8003914:	6864      	ldr	r4, [r4, #4]
 8003916:	e7ac      	b.n	8003872 <_malloc_r+0x36>
 8003918:	4634      	mov	r4, r6
 800391a:	6876      	ldr	r6, [r6, #4]
 800391c:	e7b4      	b.n	8003888 <_malloc_r+0x4c>
 800391e:	4613      	mov	r3, r2
 8003920:	e7cc      	b.n	80038bc <_malloc_r+0x80>
 8003922:	230c      	movs	r3, #12
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4638      	mov	r0, r7
 8003928:	f000 fa4c 	bl	8003dc4 <__malloc_unlock>
 800392c:	e797      	b.n	800385e <_malloc_r+0x22>
 800392e:	6025      	str	r5, [r4, #0]
 8003930:	e7dc      	b.n	80038ec <_malloc_r+0xb0>
 8003932:	605b      	str	r3, [r3, #4]
 8003934:	deff      	udf	#255	; 0xff
 8003936:	bf00      	nop
 8003938:	20000274 	.word	0x20000274

0800393c <_printf_common>:
 800393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003940:	4616      	mov	r6, r2
 8003942:	4699      	mov	r9, r3
 8003944:	688a      	ldr	r2, [r1, #8]
 8003946:	690b      	ldr	r3, [r1, #16]
 8003948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800394c:	4293      	cmp	r3, r2
 800394e:	bfb8      	it	lt
 8003950:	4613      	movlt	r3, r2
 8003952:	6033      	str	r3, [r6, #0]
 8003954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003958:	4607      	mov	r7, r0
 800395a:	460c      	mov	r4, r1
 800395c:	b10a      	cbz	r2, 8003962 <_printf_common+0x26>
 800395e:	3301      	adds	r3, #1
 8003960:	6033      	str	r3, [r6, #0]
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	0699      	lsls	r1, r3, #26
 8003966:	bf42      	ittt	mi
 8003968:	6833      	ldrmi	r3, [r6, #0]
 800396a:	3302      	addmi	r3, #2
 800396c:	6033      	strmi	r3, [r6, #0]
 800396e:	6825      	ldr	r5, [r4, #0]
 8003970:	f015 0506 	ands.w	r5, r5, #6
 8003974:	d106      	bne.n	8003984 <_printf_common+0x48>
 8003976:	f104 0a19 	add.w	sl, r4, #25
 800397a:	68e3      	ldr	r3, [r4, #12]
 800397c:	6832      	ldr	r2, [r6, #0]
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	42ab      	cmp	r3, r5
 8003982:	dc26      	bgt.n	80039d2 <_printf_common+0x96>
 8003984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003988:	1e13      	subs	r3, r2, #0
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	bf18      	it	ne
 800398e:	2301      	movne	r3, #1
 8003990:	0692      	lsls	r2, r2, #26
 8003992:	d42b      	bmi.n	80039ec <_printf_common+0xb0>
 8003994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003998:	4649      	mov	r1, r9
 800399a:	4638      	mov	r0, r7
 800399c:	47c0      	blx	r8
 800399e:	3001      	adds	r0, #1
 80039a0:	d01e      	beq.n	80039e0 <_printf_common+0xa4>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	6922      	ldr	r2, [r4, #16]
 80039a6:	f003 0306 	and.w	r3, r3, #6
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	bf02      	ittt	eq
 80039ae:	68e5      	ldreq	r5, [r4, #12]
 80039b0:	6833      	ldreq	r3, [r6, #0]
 80039b2:	1aed      	subeq	r5, r5, r3
 80039b4:	68a3      	ldr	r3, [r4, #8]
 80039b6:	bf0c      	ite	eq
 80039b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039bc:	2500      	movne	r5, #0
 80039be:	4293      	cmp	r3, r2
 80039c0:	bfc4      	itt	gt
 80039c2:	1a9b      	subgt	r3, r3, r2
 80039c4:	18ed      	addgt	r5, r5, r3
 80039c6:	2600      	movs	r6, #0
 80039c8:	341a      	adds	r4, #26
 80039ca:	42b5      	cmp	r5, r6
 80039cc:	d11a      	bne.n	8003a04 <_printf_common+0xc8>
 80039ce:	2000      	movs	r0, #0
 80039d0:	e008      	b.n	80039e4 <_printf_common+0xa8>
 80039d2:	2301      	movs	r3, #1
 80039d4:	4652      	mov	r2, sl
 80039d6:	4649      	mov	r1, r9
 80039d8:	4638      	mov	r0, r7
 80039da:	47c0      	blx	r8
 80039dc:	3001      	adds	r0, #1
 80039de:	d103      	bne.n	80039e8 <_printf_common+0xac>
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e8:	3501      	adds	r5, #1
 80039ea:	e7c6      	b.n	800397a <_printf_common+0x3e>
 80039ec:	18e1      	adds	r1, r4, r3
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	2030      	movs	r0, #48	; 0x30
 80039f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f6:	4422      	add	r2, r4
 80039f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a00:	3302      	adds	r3, #2
 8003a02:	e7c7      	b.n	8003994 <_printf_common+0x58>
 8003a04:	2301      	movs	r3, #1
 8003a06:	4622      	mov	r2, r4
 8003a08:	4649      	mov	r1, r9
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	47c0      	blx	r8
 8003a0e:	3001      	adds	r0, #1
 8003a10:	d0e6      	beq.n	80039e0 <_printf_common+0xa4>
 8003a12:	3601      	adds	r6, #1
 8003a14:	e7d9      	b.n	80039ca <_printf_common+0x8e>
	...

08003a18 <_printf_i>:
 8003a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a1c:	7e0f      	ldrb	r7, [r1, #24]
 8003a1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a20:	2f78      	cmp	r7, #120	; 0x78
 8003a22:	4691      	mov	r9, r2
 8003a24:	4680      	mov	r8, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	469a      	mov	sl, r3
 8003a2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a2e:	d807      	bhi.n	8003a40 <_printf_i+0x28>
 8003a30:	2f62      	cmp	r7, #98	; 0x62
 8003a32:	d80a      	bhi.n	8003a4a <_printf_i+0x32>
 8003a34:	2f00      	cmp	r7, #0
 8003a36:	f000 80d4 	beq.w	8003be2 <_printf_i+0x1ca>
 8003a3a:	2f58      	cmp	r7, #88	; 0x58
 8003a3c:	f000 80c0 	beq.w	8003bc0 <_printf_i+0x1a8>
 8003a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a48:	e03a      	b.n	8003ac0 <_printf_i+0xa8>
 8003a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a4e:	2b15      	cmp	r3, #21
 8003a50:	d8f6      	bhi.n	8003a40 <_printf_i+0x28>
 8003a52:	a101      	add	r1, pc, #4	; (adr r1, 8003a58 <_printf_i+0x40>)
 8003a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a58:	08003ab1 	.word	0x08003ab1
 8003a5c:	08003ac5 	.word	0x08003ac5
 8003a60:	08003a41 	.word	0x08003a41
 8003a64:	08003a41 	.word	0x08003a41
 8003a68:	08003a41 	.word	0x08003a41
 8003a6c:	08003a41 	.word	0x08003a41
 8003a70:	08003ac5 	.word	0x08003ac5
 8003a74:	08003a41 	.word	0x08003a41
 8003a78:	08003a41 	.word	0x08003a41
 8003a7c:	08003a41 	.word	0x08003a41
 8003a80:	08003a41 	.word	0x08003a41
 8003a84:	08003bc9 	.word	0x08003bc9
 8003a88:	08003af1 	.word	0x08003af1
 8003a8c:	08003b83 	.word	0x08003b83
 8003a90:	08003a41 	.word	0x08003a41
 8003a94:	08003a41 	.word	0x08003a41
 8003a98:	08003beb 	.word	0x08003beb
 8003a9c:	08003a41 	.word	0x08003a41
 8003aa0:	08003af1 	.word	0x08003af1
 8003aa4:	08003a41 	.word	0x08003a41
 8003aa8:	08003a41 	.word	0x08003a41
 8003aac:	08003b8b 	.word	0x08003b8b
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	1d1a      	adds	r2, r3, #4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	602a      	str	r2, [r5, #0]
 8003ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e09f      	b.n	8003c04 <_printf_i+0x1ec>
 8003ac4:	6820      	ldr	r0, [r4, #0]
 8003ac6:	682b      	ldr	r3, [r5, #0]
 8003ac8:	0607      	lsls	r7, r0, #24
 8003aca:	f103 0104 	add.w	r1, r3, #4
 8003ace:	6029      	str	r1, [r5, #0]
 8003ad0:	d501      	bpl.n	8003ad6 <_printf_i+0xbe>
 8003ad2:	681e      	ldr	r6, [r3, #0]
 8003ad4:	e003      	b.n	8003ade <_printf_i+0xc6>
 8003ad6:	0646      	lsls	r6, r0, #25
 8003ad8:	d5fb      	bpl.n	8003ad2 <_printf_i+0xba>
 8003ada:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ade:	2e00      	cmp	r6, #0
 8003ae0:	da03      	bge.n	8003aea <_printf_i+0xd2>
 8003ae2:	232d      	movs	r3, #45	; 0x2d
 8003ae4:	4276      	negs	r6, r6
 8003ae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aea:	485a      	ldr	r0, [pc, #360]	; (8003c54 <_printf_i+0x23c>)
 8003aec:	230a      	movs	r3, #10
 8003aee:	e012      	b.n	8003b16 <_printf_i+0xfe>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	1d19      	adds	r1, r3, #4
 8003af6:	6029      	str	r1, [r5, #0]
 8003af8:	0605      	lsls	r5, r0, #24
 8003afa:	d501      	bpl.n	8003b00 <_printf_i+0xe8>
 8003afc:	681e      	ldr	r6, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <_printf_i+0xee>
 8003b00:	0641      	lsls	r1, r0, #25
 8003b02:	d5fb      	bpl.n	8003afc <_printf_i+0xe4>
 8003b04:	881e      	ldrh	r6, [r3, #0]
 8003b06:	4853      	ldr	r0, [pc, #332]	; (8003c54 <_printf_i+0x23c>)
 8003b08:	2f6f      	cmp	r7, #111	; 0x6f
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2308      	moveq	r3, #8
 8003b0e:	230a      	movne	r3, #10
 8003b10:	2100      	movs	r1, #0
 8003b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b16:	6865      	ldr	r5, [r4, #4]
 8003b18:	60a5      	str	r5, [r4, #8]
 8003b1a:	2d00      	cmp	r5, #0
 8003b1c:	bfa2      	ittt	ge
 8003b1e:	6821      	ldrge	r1, [r4, #0]
 8003b20:	f021 0104 	bicge.w	r1, r1, #4
 8003b24:	6021      	strge	r1, [r4, #0]
 8003b26:	b90e      	cbnz	r6, 8003b2c <_printf_i+0x114>
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	d04b      	beq.n	8003bc4 <_printf_i+0x1ac>
 8003b2c:	4615      	mov	r5, r2
 8003b2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b32:	fb03 6711 	mls	r7, r3, r1, r6
 8003b36:	5dc7      	ldrb	r7, [r0, r7]
 8003b38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b3c:	4637      	mov	r7, r6
 8003b3e:	42bb      	cmp	r3, r7
 8003b40:	460e      	mov	r6, r1
 8003b42:	d9f4      	bls.n	8003b2e <_printf_i+0x116>
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d10b      	bne.n	8003b60 <_printf_i+0x148>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	07de      	lsls	r6, r3, #31
 8003b4c:	d508      	bpl.n	8003b60 <_printf_i+0x148>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	6861      	ldr	r1, [r4, #4]
 8003b52:	4299      	cmp	r1, r3
 8003b54:	bfde      	ittt	le
 8003b56:	2330      	movle	r3, #48	; 0x30
 8003b58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b60:	1b52      	subs	r2, r2, r5
 8003b62:	6122      	str	r2, [r4, #16]
 8003b64:	f8cd a000 	str.w	sl, [sp]
 8003b68:	464b      	mov	r3, r9
 8003b6a:	aa03      	add	r2, sp, #12
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4640      	mov	r0, r8
 8003b70:	f7ff fee4 	bl	800393c <_printf_common>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d14a      	bne.n	8003c0e <_printf_i+0x1f6>
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b7c:	b004      	add	sp, #16
 8003b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	f043 0320 	orr.w	r3, r3, #32
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	4833      	ldr	r0, [pc, #204]	; (8003c58 <_printf_i+0x240>)
 8003b8c:	2778      	movs	r7, #120	; 0x78
 8003b8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	6829      	ldr	r1, [r5, #0]
 8003b96:	061f      	lsls	r7, r3, #24
 8003b98:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b9c:	d402      	bmi.n	8003ba4 <_printf_i+0x18c>
 8003b9e:	065f      	lsls	r7, r3, #25
 8003ba0:	bf48      	it	mi
 8003ba2:	b2b6      	uxthmi	r6, r6
 8003ba4:	07df      	lsls	r7, r3, #31
 8003ba6:	bf48      	it	mi
 8003ba8:	f043 0320 	orrmi.w	r3, r3, #32
 8003bac:	6029      	str	r1, [r5, #0]
 8003bae:	bf48      	it	mi
 8003bb0:	6023      	strmi	r3, [r4, #0]
 8003bb2:	b91e      	cbnz	r6, 8003bbc <_printf_i+0x1a4>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	f023 0320 	bic.w	r3, r3, #32
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	e7a7      	b.n	8003b10 <_printf_i+0xf8>
 8003bc0:	4824      	ldr	r0, [pc, #144]	; (8003c54 <_printf_i+0x23c>)
 8003bc2:	e7e4      	b.n	8003b8e <_printf_i+0x176>
 8003bc4:	4615      	mov	r5, r2
 8003bc6:	e7bd      	b.n	8003b44 <_printf_i+0x12c>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	6826      	ldr	r6, [r4, #0]
 8003bcc:	6961      	ldr	r1, [r4, #20]
 8003bce:	1d18      	adds	r0, r3, #4
 8003bd0:	6028      	str	r0, [r5, #0]
 8003bd2:	0635      	lsls	r5, r6, #24
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	d501      	bpl.n	8003bdc <_printf_i+0x1c4>
 8003bd8:	6019      	str	r1, [r3, #0]
 8003bda:	e002      	b.n	8003be2 <_printf_i+0x1ca>
 8003bdc:	0670      	lsls	r0, r6, #25
 8003bde:	d5fb      	bpl.n	8003bd8 <_printf_i+0x1c0>
 8003be0:	8019      	strh	r1, [r3, #0]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6123      	str	r3, [r4, #16]
 8003be6:	4615      	mov	r5, r2
 8003be8:	e7bc      	b.n	8003b64 <_printf_i+0x14c>
 8003bea:	682b      	ldr	r3, [r5, #0]
 8003bec:	1d1a      	adds	r2, r3, #4
 8003bee:	602a      	str	r2, [r5, #0]
 8003bf0:	681d      	ldr	r5, [r3, #0]
 8003bf2:	6862      	ldr	r2, [r4, #4]
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f7fc fafa 	bl	80001f0 <memchr>
 8003bfc:	b108      	cbz	r0, 8003c02 <_printf_i+0x1ea>
 8003bfe:	1b40      	subs	r0, r0, r5
 8003c00:	6060      	str	r0, [r4, #4]
 8003c02:	6863      	ldr	r3, [r4, #4]
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	2300      	movs	r3, #0
 8003c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c0c:	e7aa      	b.n	8003b64 <_printf_i+0x14c>
 8003c0e:	6923      	ldr	r3, [r4, #16]
 8003c10:	462a      	mov	r2, r5
 8003c12:	4649      	mov	r1, r9
 8003c14:	4640      	mov	r0, r8
 8003c16:	47d0      	blx	sl
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d0ad      	beq.n	8003b78 <_printf_i+0x160>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	079b      	lsls	r3, r3, #30
 8003c20:	d413      	bmi.n	8003c4a <_printf_i+0x232>
 8003c22:	68e0      	ldr	r0, [r4, #12]
 8003c24:	9b03      	ldr	r3, [sp, #12]
 8003c26:	4298      	cmp	r0, r3
 8003c28:	bfb8      	it	lt
 8003c2a:	4618      	movlt	r0, r3
 8003c2c:	e7a6      	b.n	8003b7c <_printf_i+0x164>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4632      	mov	r2, r6
 8003c32:	4649      	mov	r1, r9
 8003c34:	4640      	mov	r0, r8
 8003c36:	47d0      	blx	sl
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d09d      	beq.n	8003b78 <_printf_i+0x160>
 8003c3c:	3501      	adds	r5, #1
 8003c3e:	68e3      	ldr	r3, [r4, #12]
 8003c40:	9903      	ldr	r1, [sp, #12]
 8003c42:	1a5b      	subs	r3, r3, r1
 8003c44:	42ab      	cmp	r3, r5
 8003c46:	dcf2      	bgt.n	8003c2e <_printf_i+0x216>
 8003c48:	e7eb      	b.n	8003c22 <_printf_i+0x20a>
 8003c4a:	2500      	movs	r5, #0
 8003c4c:	f104 0619 	add.w	r6, r4, #25
 8003c50:	e7f5      	b.n	8003c3e <_printf_i+0x226>
 8003c52:	bf00      	nop
 8003c54:	080045f7 	.word	0x080045f7
 8003c58:	08004608 	.word	0x08004608

08003c5c <__sflush_r>:
 8003c5c:	898a      	ldrh	r2, [r1, #12]
 8003c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c62:	4605      	mov	r5, r0
 8003c64:	0710      	lsls	r0, r2, #28
 8003c66:	460c      	mov	r4, r1
 8003c68:	d458      	bmi.n	8003d1c <__sflush_r+0xc0>
 8003c6a:	684b      	ldr	r3, [r1, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	dc05      	bgt.n	8003c7c <__sflush_r+0x20>
 8003c70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	dc02      	bgt.n	8003c7c <__sflush_r+0x20>
 8003c76:	2000      	movs	r0, #0
 8003c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c7e:	2e00      	cmp	r6, #0
 8003c80:	d0f9      	beq.n	8003c76 <__sflush_r+0x1a>
 8003c82:	2300      	movs	r3, #0
 8003c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c88:	682f      	ldr	r7, [r5, #0]
 8003c8a:	6a21      	ldr	r1, [r4, #32]
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	d032      	beq.n	8003cf6 <__sflush_r+0x9a>
 8003c90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	075a      	lsls	r2, r3, #29
 8003c96:	d505      	bpl.n	8003ca4 <__sflush_r+0x48>
 8003c98:	6863      	ldr	r3, [r4, #4]
 8003c9a:	1ac0      	subs	r0, r0, r3
 8003c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c9e:	b10b      	cbz	r3, 8003ca4 <__sflush_r+0x48>
 8003ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ca2:	1ac0      	subs	r0, r0, r3
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003caa:	6a21      	ldr	r1, [r4, #32]
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b0      	blx	r6
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	d106      	bne.n	8003cc4 <__sflush_r+0x68>
 8003cb6:	6829      	ldr	r1, [r5, #0]
 8003cb8:	291d      	cmp	r1, #29
 8003cba:	d82b      	bhi.n	8003d14 <__sflush_r+0xb8>
 8003cbc:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <__sflush_r+0x108>)
 8003cbe:	410a      	asrs	r2, r1
 8003cc0:	07d6      	lsls	r6, r2, #31
 8003cc2:	d427      	bmi.n	8003d14 <__sflush_r+0xb8>
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	6062      	str	r2, [r4, #4]
 8003cc8:	04d9      	lsls	r1, r3, #19
 8003cca:	6922      	ldr	r2, [r4, #16]
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	d504      	bpl.n	8003cda <__sflush_r+0x7e>
 8003cd0:	1c42      	adds	r2, r0, #1
 8003cd2:	d101      	bne.n	8003cd8 <__sflush_r+0x7c>
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	b903      	cbnz	r3, 8003cda <__sflush_r+0x7e>
 8003cd8:	6560      	str	r0, [r4, #84]	; 0x54
 8003cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cdc:	602f      	str	r7, [r5, #0]
 8003cde:	2900      	cmp	r1, #0
 8003ce0:	d0c9      	beq.n	8003c76 <__sflush_r+0x1a>
 8003ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ce6:	4299      	cmp	r1, r3
 8003ce8:	d002      	beq.n	8003cf0 <__sflush_r+0x94>
 8003cea:	4628      	mov	r0, r5
 8003cec:	f000 fa94 	bl	8004218 <_free_r>
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	6360      	str	r0, [r4, #52]	; 0x34
 8003cf4:	e7c0      	b.n	8003c78 <__sflush_r+0x1c>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	47b0      	blx	r6
 8003cfc:	1c41      	adds	r1, r0, #1
 8003cfe:	d1c8      	bne.n	8003c92 <__sflush_r+0x36>
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0c5      	beq.n	8003c92 <__sflush_r+0x36>
 8003d06:	2b1d      	cmp	r3, #29
 8003d08:	d001      	beq.n	8003d0e <__sflush_r+0xb2>
 8003d0a:	2b16      	cmp	r3, #22
 8003d0c:	d101      	bne.n	8003d12 <__sflush_r+0xb6>
 8003d0e:	602f      	str	r7, [r5, #0]
 8003d10:	e7b1      	b.n	8003c76 <__sflush_r+0x1a>
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d18:	81a3      	strh	r3, [r4, #12]
 8003d1a:	e7ad      	b.n	8003c78 <__sflush_r+0x1c>
 8003d1c:	690f      	ldr	r7, [r1, #16]
 8003d1e:	2f00      	cmp	r7, #0
 8003d20:	d0a9      	beq.n	8003c76 <__sflush_r+0x1a>
 8003d22:	0793      	lsls	r3, r2, #30
 8003d24:	680e      	ldr	r6, [r1, #0]
 8003d26:	bf08      	it	eq
 8003d28:	694b      	ldreq	r3, [r1, #20]
 8003d2a:	600f      	str	r7, [r1, #0]
 8003d2c:	bf18      	it	ne
 8003d2e:	2300      	movne	r3, #0
 8003d30:	eba6 0807 	sub.w	r8, r6, r7
 8003d34:	608b      	str	r3, [r1, #8]
 8003d36:	f1b8 0f00 	cmp.w	r8, #0
 8003d3a:	dd9c      	ble.n	8003c76 <__sflush_r+0x1a>
 8003d3c:	6a21      	ldr	r1, [r4, #32]
 8003d3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d40:	4643      	mov	r3, r8
 8003d42:	463a      	mov	r2, r7
 8003d44:	4628      	mov	r0, r5
 8003d46:	47b0      	blx	r6
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	dc06      	bgt.n	8003d5a <__sflush_r+0xfe>
 8003d4c:	89a3      	ldrh	r3, [r4, #12]
 8003d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d52:	81a3      	strh	r3, [r4, #12]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d58:	e78e      	b.n	8003c78 <__sflush_r+0x1c>
 8003d5a:	4407      	add	r7, r0
 8003d5c:	eba8 0800 	sub.w	r8, r8, r0
 8003d60:	e7e9      	b.n	8003d36 <__sflush_r+0xda>
 8003d62:	bf00      	nop
 8003d64:	dfbffffe 	.word	0xdfbffffe

08003d68 <_fflush_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	690b      	ldr	r3, [r1, #16]
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	b913      	cbnz	r3, 8003d78 <_fflush_r+0x10>
 8003d72:	2500      	movs	r5, #0
 8003d74:	4628      	mov	r0, r5
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	b118      	cbz	r0, 8003d82 <_fflush_r+0x1a>
 8003d7a:	6a03      	ldr	r3, [r0, #32]
 8003d7c:	b90b      	cbnz	r3, 8003d82 <_fflush_r+0x1a>
 8003d7e:	f7ff f8a5 	bl	8002ecc <__sinit>
 8003d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f3      	beq.n	8003d72 <_fflush_r+0xa>
 8003d8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d8c:	07d0      	lsls	r0, r2, #31
 8003d8e:	d404      	bmi.n	8003d9a <_fflush_r+0x32>
 8003d90:	0599      	lsls	r1, r3, #22
 8003d92:	d402      	bmi.n	8003d9a <_fflush_r+0x32>
 8003d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d96:	f7ff fa6c 	bl	8003272 <__retarget_lock_acquire_recursive>
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	f7ff ff5d 	bl	8003c5c <__sflush_r>
 8003da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003da4:	07da      	lsls	r2, r3, #31
 8003da6:	4605      	mov	r5, r0
 8003da8:	d4e4      	bmi.n	8003d74 <_fflush_r+0xc>
 8003daa:	89a3      	ldrh	r3, [r4, #12]
 8003dac:	059b      	lsls	r3, r3, #22
 8003dae:	d4e1      	bmi.n	8003d74 <_fflush_r+0xc>
 8003db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003db2:	f7ff fa5f 	bl	8003274 <__retarget_lock_release_recursive>
 8003db6:	e7dd      	b.n	8003d74 <_fflush_r+0xc>

08003db8 <__malloc_lock>:
 8003db8:	4801      	ldr	r0, [pc, #4]	; (8003dc0 <__malloc_lock+0x8>)
 8003dba:	f7ff ba5a 	b.w	8003272 <__retarget_lock_acquire_recursive>
 8003dbe:	bf00      	nop
 8003dc0:	20000270 	.word	0x20000270

08003dc4 <__malloc_unlock>:
 8003dc4:	4801      	ldr	r0, [pc, #4]	; (8003dcc <__malloc_unlock+0x8>)
 8003dc6:	f7ff ba55 	b.w	8003274 <__retarget_lock_release_recursive>
 8003dca:	bf00      	nop
 8003dcc:	20000270 	.word	0x20000270

08003dd0 <__sread>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd8:	f000 f9d4 	bl	8004184 <_read_r>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	bfab      	itete	ge
 8003de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003de2:	89a3      	ldrhlt	r3, [r4, #12]
 8003de4:	181b      	addge	r3, r3, r0
 8003de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dea:	bfac      	ite	ge
 8003dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8003dee:	81a3      	strhlt	r3, [r4, #12]
 8003df0:	bd10      	pop	{r4, pc}

08003df2 <__swrite>:
 8003df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df6:	461f      	mov	r7, r3
 8003df8:	898b      	ldrh	r3, [r1, #12]
 8003dfa:	05db      	lsls	r3, r3, #23
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	4616      	mov	r6, r2
 8003e02:	d505      	bpl.n	8003e10 <__swrite+0x1e>
 8003e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e08:	2302      	movs	r3, #2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f000 f9a8 	bl	8004160 <_lseek_r>
 8003e10:	89a3      	ldrh	r3, [r4, #12]
 8003e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e1a:	81a3      	strh	r3, [r4, #12]
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	463b      	mov	r3, r7
 8003e20:	4628      	mov	r0, r5
 8003e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e26:	f000 b9cf 	b.w	80041c8 <_write_r>

08003e2a <__sseek>:
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e32:	f000 f995 	bl	8004160 <_lseek_r>
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	bf15      	itete	ne
 8003e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e46:	81a3      	strheq	r3, [r4, #12]
 8003e48:	bf18      	it	ne
 8003e4a:	81a3      	strhne	r3, [r4, #12]
 8003e4c:	bd10      	pop	{r4, pc}

08003e4e <__sclose>:
 8003e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e52:	f000 b953 	b.w	80040fc <_close_r>
	...

08003e58 <fiprintf>:
 8003e58:	b40e      	push	{r1, r2, r3}
 8003e5a:	b503      	push	{r0, r1, lr}
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	ab03      	add	r3, sp, #12
 8003e60:	4805      	ldr	r0, [pc, #20]	; (8003e78 <fiprintf+0x20>)
 8003e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	f7ff fba5 	bl	80035b8 <_vfiprintf_r>
 8003e6e:	b002      	add	sp, #8
 8003e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e74:	b003      	add	sp, #12
 8003e76:	4770      	bx	lr
 8003e78:	20000064 	.word	0x20000064

08003e7c <_realloc_r>:
 8003e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e80:	4680      	mov	r8, r0
 8003e82:	4614      	mov	r4, r2
 8003e84:	460e      	mov	r6, r1
 8003e86:	b921      	cbnz	r1, 8003e92 <_realloc_r+0x16>
 8003e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	f7ff bcd5 	b.w	800383c <_malloc_r>
 8003e92:	b92a      	cbnz	r2, 8003ea0 <_realloc_r+0x24>
 8003e94:	f000 f9c0 	bl	8004218 <_free_r>
 8003e98:	4625      	mov	r5, r4
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea0:	f000 fa06 	bl	80042b0 <_malloc_usable_size_r>
 8003ea4:	4284      	cmp	r4, r0
 8003ea6:	4607      	mov	r7, r0
 8003ea8:	d802      	bhi.n	8003eb0 <_realloc_r+0x34>
 8003eaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003eae:	d812      	bhi.n	8003ed6 <_realloc_r+0x5a>
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	f7ff fcc2 	bl	800383c <_malloc_r>
 8003eb8:	4605      	mov	r5, r0
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d0ed      	beq.n	8003e9a <_realloc_r+0x1e>
 8003ebe:	42bc      	cmp	r4, r7
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	bf28      	it	cs
 8003ec6:	463a      	movcs	r2, r7
 8003ec8:	f000 f990 	bl	80041ec <memcpy>
 8003ecc:	4631      	mov	r1, r6
 8003ece:	4640      	mov	r0, r8
 8003ed0:	f000 f9a2 	bl	8004218 <_free_r>
 8003ed4:	e7e1      	b.n	8003e9a <_realloc_r+0x1e>
 8003ed6:	4635      	mov	r5, r6
 8003ed8:	e7df      	b.n	8003e9a <_realloc_r+0x1e>

08003eda <__swbuf_r>:
 8003eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003edc:	460e      	mov	r6, r1
 8003ede:	4614      	mov	r4, r2
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	b118      	cbz	r0, 8003eec <__swbuf_r+0x12>
 8003ee4:	6a03      	ldr	r3, [r0, #32]
 8003ee6:	b90b      	cbnz	r3, 8003eec <__swbuf_r+0x12>
 8003ee8:	f7fe fff0 	bl	8002ecc <__sinit>
 8003eec:	69a3      	ldr	r3, [r4, #24]
 8003eee:	60a3      	str	r3, [r4, #8]
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	071a      	lsls	r2, r3, #28
 8003ef4:	d525      	bpl.n	8003f42 <__swbuf_r+0x68>
 8003ef6:	6923      	ldr	r3, [r4, #16]
 8003ef8:	b31b      	cbz	r3, 8003f42 <__swbuf_r+0x68>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	6922      	ldr	r2, [r4, #16]
 8003efe:	1a98      	subs	r0, r3, r2
 8003f00:	6963      	ldr	r3, [r4, #20]
 8003f02:	b2f6      	uxtb	r6, r6
 8003f04:	4283      	cmp	r3, r0
 8003f06:	4637      	mov	r7, r6
 8003f08:	dc04      	bgt.n	8003f14 <__swbuf_r+0x3a>
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f7ff ff2b 	bl	8003d68 <_fflush_r>
 8003f12:	b9e0      	cbnz	r0, 8003f4e <__swbuf_r+0x74>
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	60a3      	str	r3, [r4, #8]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	6022      	str	r2, [r4, #0]
 8003f20:	701e      	strb	r6, [r3, #0]
 8003f22:	6962      	ldr	r2, [r4, #20]
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d004      	beq.n	8003f34 <__swbuf_r+0x5a>
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	07db      	lsls	r3, r3, #31
 8003f2e:	d506      	bpl.n	8003f3e <__swbuf_r+0x64>
 8003f30:	2e0a      	cmp	r6, #10
 8003f32:	d104      	bne.n	8003f3e <__swbuf_r+0x64>
 8003f34:	4621      	mov	r1, r4
 8003f36:	4628      	mov	r0, r5
 8003f38:	f7ff ff16 	bl	8003d68 <_fflush_r>
 8003f3c:	b938      	cbnz	r0, 8003f4e <__swbuf_r+0x74>
 8003f3e:	4638      	mov	r0, r7
 8003f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f42:	4621      	mov	r1, r4
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 f805 	bl	8003f54 <__swsetup_r>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0d5      	beq.n	8003efa <__swbuf_r+0x20>
 8003f4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f52:	e7f4      	b.n	8003f3e <__swbuf_r+0x64>

08003f54 <__swsetup_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <__swsetup_r+0xac>)
 8003f58:	4605      	mov	r5, r0
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	b118      	cbz	r0, 8003f68 <__swsetup_r+0x14>
 8003f60:	6a03      	ldr	r3, [r0, #32]
 8003f62:	b90b      	cbnz	r3, 8003f68 <__swsetup_r+0x14>
 8003f64:	f7fe ffb2 	bl	8002ecc <__sinit>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f6e:	0718      	lsls	r0, r3, #28
 8003f70:	d422      	bmi.n	8003fb8 <__swsetup_r+0x64>
 8003f72:	06d9      	lsls	r1, r3, #27
 8003f74:	d407      	bmi.n	8003f86 <__swsetup_r+0x32>
 8003f76:	2309      	movs	r3, #9
 8003f78:	602b      	str	r3, [r5, #0]
 8003f7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f7e:	81a3      	strh	r3, [r4, #12]
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f84:	e034      	b.n	8003ff0 <__swsetup_r+0x9c>
 8003f86:	0758      	lsls	r0, r3, #29
 8003f88:	d512      	bpl.n	8003fb0 <__swsetup_r+0x5c>
 8003f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f8c:	b141      	cbz	r1, 8003fa0 <__swsetup_r+0x4c>
 8003f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f92:	4299      	cmp	r1, r3
 8003f94:	d002      	beq.n	8003f9c <__swsetup_r+0x48>
 8003f96:	4628      	mov	r0, r5
 8003f98:	f000 f93e 	bl	8004218 <_free_r>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	6363      	str	r3, [r4, #52]	; 0x34
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6063      	str	r3, [r4, #4]
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6023      	str	r3, [r4, #0]
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	f043 0308 	orr.w	r3, r3, #8
 8003fb6:	81a3      	strh	r3, [r4, #12]
 8003fb8:	6923      	ldr	r3, [r4, #16]
 8003fba:	b94b      	cbnz	r3, 8003fd0 <__swsetup_r+0x7c>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc6:	d003      	beq.n	8003fd0 <__swsetup_r+0x7c>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 f840 	bl	8004050 <__smakebuf_r>
 8003fd0:	89a0      	ldrh	r0, [r4, #12]
 8003fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fd6:	f010 0301 	ands.w	r3, r0, #1
 8003fda:	d00a      	beq.n	8003ff2 <__swsetup_r+0x9e>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60a3      	str	r3, [r4, #8]
 8003fe0:	6963      	ldr	r3, [r4, #20]
 8003fe2:	425b      	negs	r3, r3
 8003fe4:	61a3      	str	r3, [r4, #24]
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	b943      	cbnz	r3, 8003ffc <__swsetup_r+0xa8>
 8003fea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fee:	d1c4      	bne.n	8003f7a <__swsetup_r+0x26>
 8003ff0:	bd38      	pop	{r3, r4, r5, pc}
 8003ff2:	0781      	lsls	r1, r0, #30
 8003ff4:	bf58      	it	pl
 8003ff6:	6963      	ldrpl	r3, [r4, #20]
 8003ff8:	60a3      	str	r3, [r4, #8]
 8003ffa:	e7f4      	b.n	8003fe6 <__swsetup_r+0x92>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e7f7      	b.n	8003ff0 <__swsetup_r+0x9c>
 8004000:	20000064 	.word	0x20000064

08004004 <__swhatbuf_r>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	460c      	mov	r4, r1
 8004008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400c:	2900      	cmp	r1, #0
 800400e:	b096      	sub	sp, #88	; 0x58
 8004010:	4615      	mov	r5, r2
 8004012:	461e      	mov	r6, r3
 8004014:	da0d      	bge.n	8004032 <__swhatbuf_r+0x2e>
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	f013 0f80 	tst.w	r3, #128	; 0x80
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	bf0c      	ite	eq
 8004022:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004026:	2340      	movne	r3, #64	; 0x40
 8004028:	2000      	movs	r0, #0
 800402a:	6031      	str	r1, [r6, #0]
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	b016      	add	sp, #88	; 0x58
 8004030:	bd70      	pop	{r4, r5, r6, pc}
 8004032:	466a      	mov	r2, sp
 8004034:	f000 f872 	bl	800411c <_fstat_r>
 8004038:	2800      	cmp	r0, #0
 800403a:	dbec      	blt.n	8004016 <__swhatbuf_r+0x12>
 800403c:	9901      	ldr	r1, [sp, #4]
 800403e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004042:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004046:	4259      	negs	r1, r3
 8004048:	4159      	adcs	r1, r3
 800404a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404e:	e7eb      	b.n	8004028 <__swhatbuf_r+0x24>

08004050 <__smakebuf_r>:
 8004050:	898b      	ldrh	r3, [r1, #12]
 8004052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004054:	079d      	lsls	r5, r3, #30
 8004056:	4606      	mov	r6, r0
 8004058:	460c      	mov	r4, r1
 800405a:	d507      	bpl.n	800406c <__smakebuf_r+0x1c>
 800405c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	6123      	str	r3, [r4, #16]
 8004064:	2301      	movs	r3, #1
 8004066:	6163      	str	r3, [r4, #20]
 8004068:	b002      	add	sp, #8
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	ab01      	add	r3, sp, #4
 800406e:	466a      	mov	r2, sp
 8004070:	f7ff ffc8 	bl	8004004 <__swhatbuf_r>
 8004074:	9900      	ldr	r1, [sp, #0]
 8004076:	4605      	mov	r5, r0
 8004078:	4630      	mov	r0, r6
 800407a:	f7ff fbdf 	bl	800383c <_malloc_r>
 800407e:	b948      	cbnz	r0, 8004094 <__smakebuf_r+0x44>
 8004080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004084:	059a      	lsls	r2, r3, #22
 8004086:	d4ef      	bmi.n	8004068 <__smakebuf_r+0x18>
 8004088:	f023 0303 	bic.w	r3, r3, #3
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	e7e3      	b.n	800405c <__smakebuf_r+0xc>
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	6020      	str	r0, [r4, #0]
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	9b00      	ldr	r3, [sp, #0]
 80040a0:	6163      	str	r3, [r4, #20]
 80040a2:	9b01      	ldr	r3, [sp, #4]
 80040a4:	6120      	str	r0, [r4, #16]
 80040a6:	b15b      	cbz	r3, 80040c0 <__smakebuf_r+0x70>
 80040a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f847 	bl	8004140 <_isatty_r>
 80040b2:	b128      	cbz	r0, 80040c0 <__smakebuf_r+0x70>
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	431d      	orrs	r5, r3
 80040c4:	81a5      	strh	r5, [r4, #12]
 80040c6:	e7cf      	b.n	8004068 <__smakebuf_r+0x18>

080040c8 <memmove>:
 80040c8:	4288      	cmp	r0, r1
 80040ca:	b510      	push	{r4, lr}
 80040cc:	eb01 0402 	add.w	r4, r1, r2
 80040d0:	d902      	bls.n	80040d8 <memmove+0x10>
 80040d2:	4284      	cmp	r4, r0
 80040d4:	4623      	mov	r3, r4
 80040d6:	d807      	bhi.n	80040e8 <memmove+0x20>
 80040d8:	1e43      	subs	r3, r0, #1
 80040da:	42a1      	cmp	r1, r4
 80040dc:	d008      	beq.n	80040f0 <memmove+0x28>
 80040de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040e6:	e7f8      	b.n	80040da <memmove+0x12>
 80040e8:	4402      	add	r2, r0
 80040ea:	4601      	mov	r1, r0
 80040ec:	428a      	cmp	r2, r1
 80040ee:	d100      	bne.n	80040f2 <memmove+0x2a>
 80040f0:	bd10      	pop	{r4, pc}
 80040f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040fa:	e7f7      	b.n	80040ec <memmove+0x24>

080040fc <_close_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d06      	ldr	r5, [pc, #24]	; (8004118 <_close_r+0x1c>)
 8004100:	2300      	movs	r3, #0
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fc ff6a 	bl	8000fe0 <_close>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_close_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_close_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	2000027c 	.word	0x2000027c

0800411c <_fstat_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d07      	ldr	r5, [pc, #28]	; (800413c <_fstat_r+0x20>)
 8004120:	2300      	movs	r3, #0
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	f7fc ff65 	bl	8000ff8 <_fstat>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d102      	bne.n	8004138 <_fstat_r+0x1c>
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	b103      	cbz	r3, 8004138 <_fstat_r+0x1c>
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	bd38      	pop	{r3, r4, r5, pc}
 800413a:	bf00      	nop
 800413c:	2000027c 	.word	0x2000027c

08004140 <_isatty_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d06      	ldr	r5, [pc, #24]	; (800415c <_isatty_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fc ff64 	bl	8001018 <_isatty>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_isatty_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_isatty_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	2000027c 	.word	0x2000027c

08004160 <_lseek_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d07      	ldr	r5, [pc, #28]	; (8004180 <_lseek_r+0x20>)
 8004164:	4604      	mov	r4, r0
 8004166:	4608      	mov	r0, r1
 8004168:	4611      	mov	r1, r2
 800416a:	2200      	movs	r2, #0
 800416c:	602a      	str	r2, [r5, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	f7fc ff5d 	bl	800102e <_lseek>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_lseek_r+0x1e>
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	b103      	cbz	r3, 800417e <_lseek_r+0x1e>
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	2000027c 	.word	0x2000027c

08004184 <_read_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4d07      	ldr	r5, [pc, #28]	; (80041a4 <_read_r+0x20>)
 8004188:	4604      	mov	r4, r0
 800418a:	4608      	mov	r0, r1
 800418c:	4611      	mov	r1, r2
 800418e:	2200      	movs	r2, #0
 8004190:	602a      	str	r2, [r5, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	f7fc ff07 	bl	8000fa6 <_read>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_read_r+0x1e>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_read_r+0x1e>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	2000027c 	.word	0x2000027c

080041a8 <_sbrk_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4d06      	ldr	r5, [pc, #24]	; (80041c4 <_sbrk_r+0x1c>)
 80041ac:	2300      	movs	r3, #0
 80041ae:	4604      	mov	r4, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	f7fc ff48 	bl	8001048 <_sbrk>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_sbrk_r+0x1a>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_sbrk_r+0x1a>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	2000027c 	.word	0x2000027c

080041c8 <_write_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	; (80041e8 <_write_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fc fb35 	bl	8000846 <_write>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_write_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_write_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	2000027c 	.word	0x2000027c

080041ec <memcpy>:
 80041ec:	440a      	add	r2, r1
 80041ee:	4291      	cmp	r1, r2
 80041f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041f4:	d100      	bne.n	80041f8 <memcpy+0xc>
 80041f6:	4770      	bx	lr
 80041f8:	b510      	push	{r4, lr}
 80041fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004202:	4291      	cmp	r1, r2
 8004204:	d1f9      	bne.n	80041fa <memcpy+0xe>
 8004206:	bd10      	pop	{r4, pc}

08004208 <abort>:
 8004208:	b508      	push	{r3, lr}
 800420a:	2006      	movs	r0, #6
 800420c:	f000 f880 	bl	8004310 <raise>
 8004210:	2001      	movs	r0, #1
 8004212:	f7fc febe 	bl	8000f92 <_exit>
	...

08004218 <_free_r>:
 8004218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800421a:	2900      	cmp	r1, #0
 800421c:	d044      	beq.n	80042a8 <_free_r+0x90>
 800421e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004222:	9001      	str	r0, [sp, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f1a1 0404 	sub.w	r4, r1, #4
 800422a:	bfb8      	it	lt
 800422c:	18e4      	addlt	r4, r4, r3
 800422e:	f7ff fdc3 	bl	8003db8 <__malloc_lock>
 8004232:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <_free_r+0x94>)
 8004234:	9801      	ldr	r0, [sp, #4]
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	b933      	cbnz	r3, 8004248 <_free_r+0x30>
 800423a:	6063      	str	r3, [r4, #4]
 800423c:	6014      	str	r4, [r2, #0]
 800423e:	b003      	add	sp, #12
 8004240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004244:	f7ff bdbe 	b.w	8003dc4 <__malloc_unlock>
 8004248:	42a3      	cmp	r3, r4
 800424a:	d908      	bls.n	800425e <_free_r+0x46>
 800424c:	6825      	ldr	r5, [r4, #0]
 800424e:	1961      	adds	r1, r4, r5
 8004250:	428b      	cmp	r3, r1
 8004252:	bf01      	itttt	eq
 8004254:	6819      	ldreq	r1, [r3, #0]
 8004256:	685b      	ldreq	r3, [r3, #4]
 8004258:	1949      	addeq	r1, r1, r5
 800425a:	6021      	streq	r1, [r4, #0]
 800425c:	e7ed      	b.n	800423a <_free_r+0x22>
 800425e:	461a      	mov	r2, r3
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b10b      	cbz	r3, 8004268 <_free_r+0x50>
 8004264:	42a3      	cmp	r3, r4
 8004266:	d9fa      	bls.n	800425e <_free_r+0x46>
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	1855      	adds	r5, r2, r1
 800426c:	42a5      	cmp	r5, r4
 800426e:	d10b      	bne.n	8004288 <_free_r+0x70>
 8004270:	6824      	ldr	r4, [r4, #0]
 8004272:	4421      	add	r1, r4
 8004274:	1854      	adds	r4, r2, r1
 8004276:	42a3      	cmp	r3, r4
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	d1e0      	bne.n	800423e <_free_r+0x26>
 800427c:	681c      	ldr	r4, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	6053      	str	r3, [r2, #4]
 8004282:	440c      	add	r4, r1
 8004284:	6014      	str	r4, [r2, #0]
 8004286:	e7da      	b.n	800423e <_free_r+0x26>
 8004288:	d902      	bls.n	8004290 <_free_r+0x78>
 800428a:	230c      	movs	r3, #12
 800428c:	6003      	str	r3, [r0, #0]
 800428e:	e7d6      	b.n	800423e <_free_r+0x26>
 8004290:	6825      	ldr	r5, [r4, #0]
 8004292:	1961      	adds	r1, r4, r5
 8004294:	428b      	cmp	r3, r1
 8004296:	bf04      	itt	eq
 8004298:	6819      	ldreq	r1, [r3, #0]
 800429a:	685b      	ldreq	r3, [r3, #4]
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	bf04      	itt	eq
 80042a0:	1949      	addeq	r1, r1, r5
 80042a2:	6021      	streq	r1, [r4, #0]
 80042a4:	6054      	str	r4, [r2, #4]
 80042a6:	e7ca      	b.n	800423e <_free_r+0x26>
 80042a8:	b003      	add	sp, #12
 80042aa:	bd30      	pop	{r4, r5, pc}
 80042ac:	20000274 	.word	0x20000274

080042b0 <_malloc_usable_size_r>:
 80042b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042b4:	1f18      	subs	r0, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bfbc      	itt	lt
 80042ba:	580b      	ldrlt	r3, [r1, r0]
 80042bc:	18c0      	addlt	r0, r0, r3
 80042be:	4770      	bx	lr

080042c0 <_raise_r>:
 80042c0:	291f      	cmp	r1, #31
 80042c2:	b538      	push	{r3, r4, r5, lr}
 80042c4:	4604      	mov	r4, r0
 80042c6:	460d      	mov	r5, r1
 80042c8:	d904      	bls.n	80042d4 <_raise_r+0x14>
 80042ca:	2316      	movs	r3, #22
 80042cc:	6003      	str	r3, [r0, #0]
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
 80042d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80042d6:	b112      	cbz	r2, 80042de <_raise_r+0x1e>
 80042d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80042dc:	b94b      	cbnz	r3, 80042f2 <_raise_r+0x32>
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 f830 	bl	8004344 <_getpid_r>
 80042e4:	462a      	mov	r2, r5
 80042e6:	4601      	mov	r1, r0
 80042e8:	4620      	mov	r0, r4
 80042ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ee:	f000 b817 	b.w	8004320 <_kill_r>
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d00a      	beq.n	800430c <_raise_r+0x4c>
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	d103      	bne.n	8004302 <_raise_r+0x42>
 80042fa:	2316      	movs	r3, #22
 80042fc:	6003      	str	r3, [r0, #0]
 80042fe:	2001      	movs	r0, #1
 8004300:	e7e7      	b.n	80042d2 <_raise_r+0x12>
 8004302:	2400      	movs	r4, #0
 8004304:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004308:	4628      	mov	r0, r5
 800430a:	4798      	blx	r3
 800430c:	2000      	movs	r0, #0
 800430e:	e7e0      	b.n	80042d2 <_raise_r+0x12>

08004310 <raise>:
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <raise+0xc>)
 8004312:	4601      	mov	r1, r0
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f7ff bfd3 	b.w	80042c0 <_raise_r>
 800431a:	bf00      	nop
 800431c:	20000064 	.word	0x20000064

08004320 <_kill_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4d07      	ldr	r5, [pc, #28]	; (8004340 <_kill_r+0x20>)
 8004324:	2300      	movs	r3, #0
 8004326:	4604      	mov	r4, r0
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	f7fc fe20 	bl	8000f72 <_kill>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	d102      	bne.n	800433c <_kill_r+0x1c>
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	b103      	cbz	r3, 800433c <_kill_r+0x1c>
 800433a:	6023      	str	r3, [r4, #0]
 800433c:	bd38      	pop	{r3, r4, r5, pc}
 800433e:	bf00      	nop
 8004340:	2000027c 	.word	0x2000027c

08004344 <_getpid_r>:
 8004344:	f7fc be0d 	b.w	8000f62 <_getpid>

08004348 <_init>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr

08004354 <_fini>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	bf00      	nop
 8004358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435a:	bc08      	pop	{r3}
 800435c:	469e      	mov	lr, r3
 800435e:	4770      	bx	lr
